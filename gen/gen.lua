
local inputFileName, className = ...

local function newFuncInfo()
    return {
        comments = {},
        params = {},
        -- returns = "",
        name = "",
    }
end

local function unwrapSquareBrackets(str)
    if str:byte(1) == 91 then -- starts with '['
        return str:match("%[(%S+)%]")
    end
    return str
end

local function adjustVarType(typ)
    return unwrapSquareBrackets(typ)
end

local function adjustVarName(name)
    if name == "function" then
        name = "func"
    elseif name == "repeat" then
        name = "isRepeat"
    end
    return name
end

local function loadFuncInfos(inputFile)
    local funcInfos = {}
    local funcInfo

    local isInside = false

    for line in inputFile:lines() do
        repeat
            if line == "" then -- skip empty line
                break
            end
            if not isInside then
                if line:find("^%s+/%*%*") then
                    isInside = true
                    funcInfo = newFuncInfo()
                end
            else
                -- if the line don't starts with "     * " then it's the end of the comment
                if not line:find("^%s+%*") then
                -- if line:sub(1,6) ~= "     *" then
                    isInside = false
                    funcInfo.name = assert(line:match("%s+int (%w+)"))
                    table.insert(funcInfos, funcInfo)
                    funcInfo = nil
                else
                    if line:find("^%s+*/") then
                        -- do nothing
                    elseif line:find("@param") then
                        if line:find("%.%.%.") then
                            table.insert(funcInfo.params, {typ = "vararg"})
                        else
                            local paramType, paramName, paramDesc = line:match(".*@param%s+(%S+)%s+(%S+)%s+(.*)")
                            if not paramType then -- no comments
                                paramType, paramName = line:match(".*@param%s+(%S+)%s+(%S+)")
                            end
                            paramType = adjustVarType(paramType)
                            paramName = adjustVarName(paramName)
                            table.insert(funcInfo.params, {typ = paramType, name = paramName, desc = paramDesc})
                        end
                    elseif line:find("@return") then
                        local returnType, returnName, returnDesc = line:match(".*@return%s+(%S+)%s+(%S+)%s+(.*)")
                        if not returnType then
                            returnType, returnName = line:match(".*@return%s+(%S+)%s+(%S+)")
                        end
                        returnType = adjustVarType(returnType)
                        returnName = adjustVarName(returnName)
                        funcInfo.returns = {typ = returnType, name = returnName, desc = returnDesc}
                    else -- comments
                        table.insert(funcInfo.comments, line:sub(8))
                    end
                end
            end
        until true
    end
    return funcInfos
end

local function writeFuncInfo(funcInfo)
    print("---")
    -- write comments
    for _, comment in ipairs(funcInfo.comments) do
        if #comment > 0 then
            print("--- " .. comment)
        else
            print("---")
        end
    end
    -- write params
    for _, param in ipairs(funcInfo.params) do
        if param.typ == "vararg" then
            print("---@vararg any")
        else
            if param.desc then
                print(string.format("---@param %s %s @ %s", param.name, param.typ, param.desc))
            else
                print(string.format("---@param %s %s", param.name, param.typ))
            end
        end
    end
    -- write return
    if funcInfo.returns then
        if funcInfo.returns.desc then
            print(string.format("---@return %s @ %s, %s", funcInfo.returns.typ, funcInfo.returns.name, funcInfo.returns.desc))
        else
            print(string.format("---@return %s @ %s", funcInfo.returns.typ, funcInfo.returns.name))
        end
    end
    -- write function
    local paramNames = {}
    for _, param in ipairs(funcInfo.params) do
        table.insert(paramNames, param.name)
    end
    if className then
        print(string.format("function %s:%s(%s) end", className, funcInfo.name, table.concat(paramNames, ", ")))
    else
        print(string.format("function %s(%s) end", funcInfo.name, table.concat(paramNames, ", ")))
    end
end

local function main()
    local inputFile = assert(io.open(inputFileName, "r"))
    -- local outputFile = assert(io.open(outputFileName, "w"))
    local funcInfos = loadFuncInfos(inputFile)

    print("-- Code generated by eluna-annotations-generator, PLEASE DO NOT EDIT\n")

    if className then
        print(string.format("---@class %s", className))
        print(string.format("local %s = {}\n", className))
    end

    for _, funcInfo in ipairs(funcInfos) do
        writeFuncInfo(funcInfo)
        print("")
    end

    if className then
        print(string.format("return %s\n", className))
    end
end

main()
