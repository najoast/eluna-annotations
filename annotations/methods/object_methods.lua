-- Code generated by eluna-annotations-generator, PLEASE DO NOT EDIT

---@class Object
local Object = {}

---
--- Returns `true` if the specified flag is set, otherwise `false`.
---
---@param index uint16 @ : the index of the flags data in the [Object]
---@param flag uint32 @ : the flag to check for in the flags data
---@return bool @ hasFlag
function Object:HasFlag(index, flag) end

---
--- Returns `true` if the [Object] has been added to its [Map], otherwise `false`.
---
---@return bool @ inWorld
function Object:IsInWorld() end

---
--- rns 'true' if the [Object] is a player, 'false' otherwise.
---
---@return bool @ IsPlayer
function Object:IsPlayer() end

---
--- Returns the data at the specified index, casted to a signed 32-bit integer.
---
---@param index uint16
---@return int32 @ value
function Object:GetInt32Value(index) end

---
--- Returns the data at the specified index, casted to a unsigned 32-bit integer.
---
---@param index uint16
---@return uint32 @ value
function Object:GetUInt32Value(index) end

---
--- Returns the data at the specified index, casted to a single-precision floating point value.
---
---@param index uint16
---@return float @ value
function Object:GetFloatValue(index) end

---
--- Returns the data at the specified index and offset, casted to an unsigned 8-bit integer.
---
--- E.g. if you want the second byte at index 10, you would pass in 1 as the offset.
---
---@param index uint16
---@param offset uint8 @ : should be 0, 1, 2, or 3
---@return uint8 @ value
function Object:GetByteValue(index, offset) end

---
--- Returns the data at the specified index and offset, casted to a signed 16-bit integer.
---
--- E.g. if you want the second half-word at index 10, you would pass in 1 as the offset.
---
---@param index uint16
---@param offset uint8 @ : should be 0 or 1
---@return uint16 @ value
function Object:GetUInt16Value(index, offset) end

---
--- Returns the scale/size of the [Object].
---
--- This affects the size of a [WorldObject] in-game, but [Item]s don't have a "scale".
---
---@return float @ scale
function Object:GetScale() end

---
--- Returns the entry of the [Object].
---
--- [Player]s do not have an "entry".
---
---@return uint32 @ entry
function Object:GetEntry() end

---
--- Returns the GUID of the [Object].
---
--- GUID is an unique identifier for the object.
---
--- However on MaNGOS and cMangos creatures and gameobjects inside different maps can share
--- the same GUID but not on the same map.
---
--- On TrinityCore this value is unique across all maps
---
---@return ObjectGuid @ guid
function Object:GetGUID() end

---
--- Returns the low-part of the [Object]'s GUID.
---
--- On TrinityCore all low GUIDs are different for all objects of the same type.
--- For example creatures in instances are assigned new GUIDs when the Map is created.
---
--- On MaNGOS and cMaNGOS low GUIDs are unique only on the same map.
--- For example creatures in instances use the same low GUID assigned for that spawn in the database.
--- This is why to identify a creature you have to know the instanceId and low GUID. See [Map:GetIntstanceId]
---
---@return uint32 @ guidLow
function Object:GetGUIDLow() end

---
--- Returns the TypeId of the [Object].
---
---     enum TypeID
---     {
---         TYPEID_OBJECT        = 0,
---         TYPEID_ITEM          = 1,
---         TYPEID_CONTAINER     = 2,
---         TYPEID_UNIT          = 3,
---         TYPEID_PLAYER        = 4,
---         TYPEID_GAMEOBJECT    = 5,
---         TYPEID_DYNAMICOBJECT = 6,
---         TYPEID_CORPSE        = 7
---     };
---
---@return uint8 @ typeID
function Object:GetTypeId() end

---
--- Returns the data at the specified index, casted to an unsigned 64-bit integer.
---
---@param index uint16
---@return uint64 @ value
function Object:GetUInt64Value(index) end

---
--- Sets the specified flag in the data value at the specified index.
---
--- If the flag was already set, it remains set.
---
--- To remove a flag, use [Object:RemoveFlag].
---
---@param index uint16
---@param value uint32
function Object:SetFlag(index, value) end

---
--- Sets the data at the specified index to the given value, converted to a signed 32-bit integer.
---
---@param index uint16
---@param value int32
function Object:SetInt32Value(index, value) end

---
--- Sets the data at the specified index to the given value, converted to an unsigned 32-bit integer.
---
---@param index uint16
---@param value uint32
function Object:SetUInt32Value(index, value) end

---
--- Sets the data at the specified index to the given value, converted to an unsigned 32-bit integer.
---
---@param index uint16
---@param value uint32
function Object:UpdateUInt32Value(index, value) end

---
--- Sets the data at the specified index to the given value, converted to a single-precision floating point value.
---
---@param index uint16
---@param value float
function Object:SetFloatValue(index, value) end

---
--- Sets the data at the specified index and offset to the given value, converted to an unsigned 8-bit integer.
---
---@param index uint16
---@param offset uint8 @ : should be 0, 1, 2, or 3
---@param value uint8
function Object:SetByteValue(index, offset, value) end

---
--- Sets the data at the specified index to the given value, converted to an unsigned 16-bit integer.
---
---@param index uint16
---@param offset uint8 @ : should be 0 or 1
---@param value uint16
function Object:SetUInt16Value(index, offset, value) end

---
--- Sets the data at the specified index to the given value, converted to a signed 16-bit integer.
---
---@param index uint16
---@param offset uint8 @ : should be 0 or 1
---@param value int16
function Object:SetInt16Value(index, offset, value) end

---
--- Sets the [Object]'s scale/size to the given value.
---
---@param scale float
function Object:SetScale(scale) end

---
--- Sets the data at the specified index to the given value, converted to an unsigned 64-bit integer.
---
---@param index uint16
---@param value uint64
function Object:SetUInt64Value(index, value) end

---
--- Removes a flag from the value at the specified index.
---
---@param index uint16
---@param flag uint32
function Object:RemoveFlag(index, flag) end

---
--- Attempts to convert the [Object] to a [Corpse].
---
--- If the [Object] is not a [Corpse], returns `nil`.
---
---@return Corpse @ corpse, : the [Object] as a [Corpse], or `nil`
function Object:ToCorpse() end

---
--- Attempts to convert the [Object] to a [GameObject].
---
--- If the [Object] is not a [GameObject], returns `nil`.
---
---@return GameObject @ gameObject, : the [Object] as a [GameObject], or `nil`
function Object:ToGameObject() end

---
--- Attempts to convert the [Object] to a [Unit].
---
--- If the [Object] is not a [Unit], returns `nil`.
---
---@return Unit @ unit, : the [Object] as a [Unit], or `nil`
function Object:ToUnit() end

---
--- Attempts to convert the [Object] to a [Creature].
---
--- If the [Object] is not a [Creature], returns `nil`.
---
---@return Creature @ creature, : the [Object] as a [Creature], or `nil`
function Object:ToCreature() end

---
--- Attempts to convert the [Object] to a [Player].
---
--- If the [Object] is not a [Player], returns `nil`.
---
---@return Player @ player, : the [Object] as a [Player], or `nil`
function Object:ToPlayer() end

return Object

