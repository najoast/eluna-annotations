-- Code generated by eluna-annotations-generator, PLEASE DO NOT EDIT

---
--- Returns Lua engine's name.
---
--- Always returns "ElunaEngine" on Eluna.
---
---@return string @ engineName
function GetLuaEngine() end

---
--- Returns emulator's name.
---
--- The result will be either `MaNGOS`, `cMaNGOS`, or `TrinityCore`.
---
---@return string @ coreName
function GetCoreName() end

---
--- Returns emulator .conf RealmID
---
--- - for MaNGOS returns the realmID as it is stored in the core.
--- - for TrinityCore returns the realmID as it is in the conf file.
---@return uint32 @ realm, ID
function GetRealmID() end

---
--- Returns emulator version
---
--- - For TrinityCore returns the date of the last revision, e.g. `2015-08-26 22:53:12 +0300`
--- - For cMaNGOS returns the date and time of the last revision, e.g. `2015-09-06 13:18:50`
--- - for MaNGOS returns the version number as string, e.g. `21000`
---
---@return string @ version
function GetCoreVersion() end

---
--- Returns emulator's supported expansion.
---
--- Expansion is 0 for pre-TBC, 1 for TBC, 2 for WotLK, and 3 for Cataclysm.
---
---@return int32 @ expansion
function GetCoreExpansion() end

---
--- Returns [Quest] template
---
---@param questId uint32 @ : [Quest] entry ID
---@return Quest @ quest
function GetQuest(questId) end

---
--- Finds and Returns [Player] by guid if found
---
---@param guid ObjectGuid @ : guid of the [Player], you can get it with [Object:GetGUID]
---@return Player @ player
function GetPlayerByGUID(guid) end

---
--- Finds and Returns [Player] by name if found
---
---@param name string @ : name of the [Player]
---@return Player @ player
function GetPlayerByName(name) end

---
--- Returns game time in seconds
---
---@return uint32 @ time
function GetGameTime() end

---
--- Returns a table with all the current [Player]s in the world
---
--- Does not return players that may be teleporting or otherwise not on any map.
---
---     enum TeamId
---     {
---         TEAM_ALLIANCE = 0,
---         TEAM_HORDE = 1,
---         TEAM_NEUTRAL = 2
---     };
---
---@param team TeamId @ = TEAM_NEUTRAL : optional check team of the [Player], Alliance, Horde or Neutral (All)
---@param onlyGM bool @ = false : optional check if GM only
---@return table @ worldPlayers
function GetPlayersInWorld(team, onlyGM) end

---
--- Returns a [Guild] by name.
---
---@param name string
---@return Guild @ guild, : the Guild, or `nil` if it doesn't exist
function GetGuildByName(name) end

---
--- Returns a [Map] by ID.
---
---@param mapId uint32 @ : see [Map.dbc](https://github.com/cmangos/issues/wiki/Map.dbc)
---@param instanceId uint32 @ = 0 : required if the map is an instance, otherwise don't pass anything
---@return Map @ map, : the Map, or `nil` if it doesn't exist
function GetMapById(mapId, instanceId) end

---
--- Returns [Guild] by the leader's GUID
---
---@param guid ObjectGuid @ : the guid of a [Guild] leader
---@return Guild @ guild,, or `nil` if it doesn't exist
function GetGuildByLeaderGUID(guid) end

---
--- Returns the amount of [Player]s in the world.
---
---@return uint32 @ count
function GetPlayerCount() end

---
--- Builds a [Player]'s GUID
---
--- [Player] GUID consist of low GUID and type ID
---
--- [Player] and [Creature] for example can have the same low GUID but not GUID.
---
---@param lowguid uint32 @ : low GUID of the [Player]
---@return ObjectGuid @ guid
function GetPlayerGUID(lowguid) end

---
--- Builds an [Item]'s GUID.
---
--- [Item] GUID consist of low GUID and type ID
--- [Player] and [Item] for example can have the same low GUID but not GUID.
---
---@param lowguid uint32 @ : low GUID of the [Item]
---@return ObjectGuid @ guid
function GetItemGUID(lowguid) end

---
--- Builds a [GameObject]'s GUID.
---
--- A GameObject's GUID consist of entry ID, low GUID and type ID
---
--- A [Player] and GameObject for example can have the same low GUID but not GUID.
---
---@param lowguid uint32 @ : low GUID of the [GameObject]
---@param entry uint32 @ : entry ID of the [GameObject]
---@return ObjectGuid @ guid
function GetObjectGUID(lowguid, entry) end

---
--- Builds a [Creature]'s GUID.
---
--- [Creature] GUID consist of entry ID, low GUID and type ID
---
--- [Player] and [Creature] for example can have the same low GUID but not GUID.
---
---@param lowguid uint32 @ : low GUID of the [Creature]
---@param entry uint32 @ : entry ID of the [Creature]
---@return ObjectGuid @ guid
function GetUnitGUID(lowguid, entry) end

---
--- Returns the low GUID from a GUID.
---
--- A GUID consists of a low GUID, type ID, and possibly an entry ID depending on the type ID.
---
--- Low GUID is an ID to distinct the objects of the same type.
---
--- [Player] and [Creature] for example can have the same low GUID but not GUID.
---
--- On TrinityCore all low GUIDs are different for all objects of the same type.
--- For example creatures in instances are assigned new GUIDs when the Map is created.
---
--- On MaNGOS and cMaNGOS low GUIDs are unique only on the same map.
--- For example creatures in instances use the same low GUID assigned for that spawn in the database.
--- This is why to identify a creature you have to know the instanceId and low GUID. See [Map:GetIntstanceId]
---
---@param guid ObjectGuid @ : GUID of an [Object]
---@return uint32 @ lowguid, : low GUID of the [Object]
function GetGUIDLow(guid) end

---
--- Returns an chat link for an [Item].
---
---     enum LocaleConstant
---     {
---         LOCALE_enUS = 0,
---         LOCALE_koKR = 1,
---         LOCALE_frFR = 2,
---         LOCALE_deDE = 3,
---         LOCALE_zhCN = 4,
---         LOCALE_zhTW = 5,
---         LOCALE_esES = 6,
---         LOCALE_esMX = 7,
---         LOCALE_ruRU = 8
---     };
---
---@param entry uint32 @ : entry ID of an [Item]
---@param locale LocaleConstant @ = DEFAULT_LOCALE : locale to return the [Item] name in
---@return string @ itemLink
function GetItemLink(entry, locale) end

---
--- Returns the type ID from a GUID.
---
--- Type ID is different for each type ([Player], [Creature], [GameObject], etc.).
---
--- GUID consist of entry ID, low GUID, and type ID.
---
---@param guid ObjectGuid @ : GUID of an [Object]
---@return int32 @ typeId, : type ID of the [Object]
function GetGUIDType(guid) end

---
--- Returns the entry ID from a GUID.
---
--- GUID consist of entry ID, low GUID, and type ID.
---
---@param guid ObjectGuid @ : GUID of an [Creature] or [GameObject]
---@return uint32 @ entry, : entry ID, or `0` if `guid` is not a [Creature] or [GameObject]
function GetGUIDEntry(guid) end

---
--- Returns the area or zone's name.
---
---     enum LocaleConstant
---     {
---         LOCALE_enUS = 0,
---         LOCALE_koKR = 1,
---         LOCALE_frFR = 2,
---         LOCALE_deDE = 3,
---         LOCALE_zhCN = 4,
---         LOCALE_zhTW = 5,
---         LOCALE_esES = 6,
---         LOCALE_esMX = 7,
---         LOCALE_ruRU = 8
---     };
---
---@param areaOrZoneId uint32 @ : area ID or zone ID
---@param locale LocaleConstant @ = DEFAULT_LOCALE : locale to return the name in
---@return string @ areaOrZoneName
function GetAreaName(areaOrZoneId, locale) end

---
--- Returns the currently active game events.
---
---@return table @ activeEvents
function GetActiveGameEvents() end

---
--- Registers a server event handler.
---
---     enum ServerEvents
---     {
---         // Server
---         SERVER_EVENT_ON_NETWORK_START           =     1,       // Not Implemented
---         SERVER_EVENT_ON_NETWORK_STOP            =     2,       // Not Implemented
---         SERVER_EVENT_ON_SOCKET_OPEN             =     3,       // Not Implemented
---         SERVER_EVENT_ON_SOCKET_CLOSE            =     4,       // Not Implemented
---         SERVER_EVENT_ON_PACKET_RECEIVE          =     5,       // (event, packet, player) - Player only if accessible. Can return false, newPacket
---         SERVER_EVENT_ON_PACKET_RECEIVE_UNKNOWN  =     6,       // Not Implemented
---         SERVER_EVENT_ON_PACKET_SEND             =     7,       // (event, packet, player) - Player only if accessible. Can return false, newPacket
---
---         // World
---         WORLD_EVENT_ON_OPEN_STATE_CHANGE        =     8,        // (event, open) - Needs core support on Mangos
---         WORLD_EVENT_ON_CONFIG_LOAD              =     9,        // (event, reload)
---         // UNUSED                               =     10,
---         WORLD_EVENT_ON_SHUTDOWN_INIT            =     11,       // (event, code, mask)
---         WORLD_EVENT_ON_SHUTDOWN_CANCEL          =     12,       // (event)
---         WORLD_EVENT_ON_UPDATE                   =     13,       // (event, diff)
---         WORLD_EVENT_ON_STARTUP                  =     14,       // (event)
---         WORLD_EVENT_ON_SHUTDOWN                 =     15,       // (event)
---
---         // Eluna
---         ELUNA_EVENT_ON_LUA_STATE_CLOSE          =     16,       // (event) - triggers just before shutting down eluna (on shutdown and restart)
---
---         // Map
---         MAP_EVENT_ON_CREATE                     =     17,       // (event, map)
---         MAP_EVENT_ON_DESTROY                    =     18,       // (event, map)
---         MAP_EVENT_ON_GRID_LOAD                  =     19,       // Not Implemented
---         MAP_EVENT_ON_GRID_UNLOAD                =     20,       // Not Implemented
---         MAP_EVENT_ON_PLAYER_ENTER               =     21,       // (event, map, player)
---         MAP_EVENT_ON_PLAYER_LEAVE               =     22,       // (event, map, player)
---         MAP_EVENT_ON_UPDATE                     =     23,       // (event, map, diff)
---
---         // Area trigger
---         TRIGGER_EVENT_ON_TRIGGER                =     24,       // (event, player, triggerId) - Can return true
---
---         // Weather
---         WEATHER_EVENT_ON_CHANGE                 =     25,       // (event, zoneId, state, grade)
---
---         // Auction house
---         AUCTION_EVENT_ON_ADD                    =     26,       // (event, auctionId, owner, item, expireTime, buyout, startBid, currentBid, bidderGUIDLow)
---         AUCTION_EVENT_ON_REMOVE                 =     27,       // (event, auctionId, owner, item, expireTime, buyout, startBid, currentBid, bidderGUIDLow)
---         AUCTION_EVENT_ON_SUCCESSFUL             =     28,       // (event, auctionId, owner, item, expireTime, buyout, startBid, currentBid, bidderGUIDLow)
---         AUCTION_EVENT_ON_EXPIRE                 =     29,       // (event, auctionId, owner, item, expireTime, buyout, startBid, currentBid, bidderGUIDLow)
---
---         // AddOns
---         ADDON_EVENT_ON_MESSAGE                  =     30,       // (event, sender, type, prefix, msg, target) - target can be nil/whisper_target/guild/group/channel. Can return false
---
---         WORLD_EVENT_ON_DELETE_CREATURE          =     31,       // (event, creature)
---         WORLD_EVENT_ON_DELETE_GAMEOBJECT        =     32,       // (event, gameobject)
---
---         // Eluna
---         ELUNA_EVENT_ON_LUA_STATE_OPEN           =     33,       // (event) - triggers after all scripts are loaded
---
---         GAME_EVENT_START                        =     34,       // (event, gameeventid)
---         GAME_EVENT_STOP                         =     35,       // (event, gameeventid)
---     };
---
--- @proto cancel = (event, function)
--- @proto cancel = (event, function, shots)
---
---
---@param event uint32 @ : server event ID, refer to ServerEvents above
---@param func function @ : function that will be called when the event occurs
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterServerEvent(event, func, shots) end

---
--- Registers a [Player] event handler.
---
--- <pre>
--- enum PlayerEvents
--- {
---     PLAYER_EVENT_ON_CHARACTER_CREATE        =     1,        // (event, player)
---     PLAYER_EVENT_ON_CHARACTER_DELETE        =     2,        // (event, guid)
---     PLAYER_EVENT_ON_LOGIN                   =     3,        // (event, player)
---     PLAYER_EVENT_ON_LOGOUT                  =     4,        // (event, player)
---     PLAYER_EVENT_ON_SPELL_CAST              =     5,        // (event, player, spell, skipCheck)
---     PLAYER_EVENT_ON_KILL_PLAYER             =     6,        // (event, killer, killed)
---     PLAYER_EVENT_ON_KILL_CREATURE           =     7,        // (event, killer, killed)
---     PLAYER_EVENT_ON_KILLED_BY_CREATURE      =     8,        // (event, killer, killed)
---     PLAYER_EVENT_ON_DUEL_REQUEST            =     9,        // (event, target, challenger)
---     PLAYER_EVENT_ON_DUEL_START              =     10,       // (event, player1, player2)
---     PLAYER_EVENT_ON_DUEL_END                =     11,       // (event, winner, loser, type)
---     PLAYER_EVENT_ON_GIVE_XP                 =     12,       // (event, player, amount, victim) - Can return new XP amount
---     PLAYER_EVENT_ON_LEVEL_CHANGE            =     13,       // (event, player, oldLevel)
---     PLAYER_EVENT_ON_MONEY_CHANGE            =     14,       // (event, player, amount) - Can return new money amount
---     PLAYER_EVENT_ON_REPUTATION_CHANGE       =     15,       // (event, player, factionId, standing, incremental) - Can return new standing -> if standing == -1, it will prevent default action (rep gain)
---     PLAYER_EVENT_ON_TALENTS_CHANGE          =     16,       // (event, player, points)
---     PLAYER_EVENT_ON_TALENTS_RESET           =     17,       // (event, player, noCost)
---     PLAYER_EVENT_ON_CHAT                    =     18,       // (event, player, msg, Type, lang) - Can return false, newMessage
---     PLAYER_EVENT_ON_WHISPER                 =     19,       // (event, player, msg, Type, lang, receiver) - Can return false, newMessage
---     PLAYER_EVENT_ON_GROUP_CHAT              =     20,       // (event, player, msg, Type, lang, group) - Can return false, newMessage
---     PLAYER_EVENT_ON_GUILD_CHAT              =     21,       // (event, player, msg, Type, lang, guild) - Can return false, newMessage
---     PLAYER_EVENT_ON_CHANNEL_CHAT            =     22,       // (event, player, msg, Type, lang, channel) - Can return false, newMessage
---     PLAYER_EVENT_ON_EMOTE                   =     23,       // (event, player, emote) - Not triggered on any known emote
---     PLAYER_EVENT_ON_TEXT_EMOTE              =     24,       // (event, player, textEmote, emoteNum, guid)
---     PLAYER_EVENT_ON_SAVE                    =     25,       // (event, player)
---     PLAYER_EVENT_ON_BIND_TO_INSTANCE        =     26,       // (event, player, difficulty, mapid, permanent)
---     PLAYER_EVENT_ON_UPDATE_ZONE             =     27,       // (event, player, newZone, newArea)
---     PLAYER_EVENT_ON_MAP_CHANGE              =     28,       // (event, player)
---
---     // Custom
---     PLAYER_EVENT_ON_EQUIP                   =     29,       // (event, player, item, bag, slot)
---     PLAYER_EVENT_ON_FIRST_LOGIN             =     30,       // (event, player)
---     PLAYER_EVENT_ON_CAN_USE_ITEM            =     31,       // (event, player, itemEntry) - Can return InventoryResult enum value
---     PLAYER_EVENT_ON_LOOT_ITEM               =     32,       // (event, player, item, count)
---     PLAYER_EVENT_ON_ENTER_COMBAT            =     33,       // (event, player, enemy)
---     PLAYER_EVENT_ON_LEAVE_COMBAT            =     34,       // (event, player)
---     PLAYER_EVENT_ON_REPOP                   =     35,       // (event, player)
---     PLAYER_EVENT_ON_RESURRECT               =     36,       // (event, player)
---     PLAYER_EVENT_ON_LOOT_MONEY              =     37,       // (event, player, amount)
---     PLAYER_EVENT_ON_QUEST_ABANDON           =     38,       // (event, player, questId)
---     PLAYER_EVENT_ON_LEARN_TALENTS           =     39,       // (event, player, talentId, talentRank, spellid)
---     // UNUSED                               =     40,       // (event, player)
---     // UNUSED                               =     41,       // (event, player)
---     PLAYER_EVENT_ON_COMMAND                 =     42,       // (event, player, command, chatHandler) - player is nil if command used from console. Can return false
---     PLAYER_EVENT_ON_PET_ADDED_TO_WORLD      =     43,       // (event, player, pet)
---     PLAYER_EVENT_ON_LEARN_SPELL             =     44,       // (event, player, spellId)
---     PLAYER_EVENT_ON_ACHIEVEMENT_COMPLETE    =     45,       // (event, player, achievement)
---     PLAYER_EVENT_ON_FFAPVP_CHANGE           =     46,       // (event, player, hasFfaPvp)
--- };
--- </pre>
---
--- @proto cancel = (event, function)
--- @proto cancel = (event, function, shots)
---
---
---@param event uint32 @ : [Player] event Id, refer to PlayerEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterPlayerEvent(event, func, shots) end

---
--- Registers a [Guild] event handler.
---
--- <pre>
--- enum GuildEvents
--- {
---     // Guild
---     GUILD_EVENT_ON_ADD_MEMBER               =     1,       // (event, guild, player, rank)
---     GUILD_EVENT_ON_REMOVE_MEMBER            =     2,       // (event, guild, player, isDisbanding)
---     GUILD_EVENT_ON_MOTD_CHANGE              =     3,       // (event, guild, newMotd)
---     GUILD_EVENT_ON_INFO_CHANGE              =     4,       // (event, guild, newInfo)
---     GUILD_EVENT_ON_CREATE                   =     5,       // (event, guild, leader, name)  // Not on TC
---     GUILD_EVENT_ON_DISBAND                  =     6,       // (event, guild)
---     GUILD_EVENT_ON_MONEY_WITHDRAW           =     7,       // (event, guild, player, amount, isRepair) - Can return new money amount
---     GUILD_EVENT_ON_MONEY_DEPOSIT            =     8,       // (event, guild, player, amount) - Can return new money amount
---     GUILD_EVENT_ON_ITEM_MOVE                =     9,       // (event, guild, player, item, isSrcBank, srcContainer, srcSlotId, isDestBank, destContainer, destSlotId)   // TODO
---     GUILD_EVENT_ON_EVENT                    =     10,      // (event, guild, eventType, plrGUIDLow1, plrGUIDLow2, newRank)  // TODO
---     GUILD_EVENT_ON_BANK_EVENT               =     11,      // (event, guild, eventType, tabId, playerGUIDLow, itemOrMoney, itemStackCount, destTabId)
---
---     GUILD_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (event, function)
--- @proto cancel = (event, function, shots)
---
---
---@param event uint32 @ : [Guild] event Id, refer to GuildEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterGuildEvent(event, func, shots) end

---
--- Registers a [Group] event handler.
---
--- <pre>
--- enum GroupEvents
--- {
---     // Group
---     GROUP_EVENT_ON_MEMBER_ADD               =     1,       // (event, group, guid)
---     GROUP_EVENT_ON_MEMBER_INVITE            =     2,       // (event, group, guid)
---     GROUP_EVENT_ON_MEMBER_REMOVE            =     3,       // (event, group, guid, method, kicker, reason)
---     GROUP_EVENT_ON_LEADER_CHANGE            =     4,       // (event, group, newLeaderGuid, oldLeaderGuid)
---     GROUP_EVENT_ON_DISBAND                  =     5,       // (event, group)
---     GROUP_EVENT_ON_CREATE                   =     6,       // (event, group, leaderGuid, groupType)
---
---     GROUP_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (event, function)
--- @proto cancel = (event, function, shots)
---
---
---@param event uint32 @ : [Group] event Id, refer to GroupEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterGroupEvent(event, func, shots) end

---
--- Registers a [BattleGround] event handler.
---
--- <pre>
--- enum BGEvents
--- {
---     BG_EVENT_ON_START                               = 1,    // (event, bg, bgId, instanceId) - Needs to be added to TC
---     BG_EVENT_ON_END                                 = 2,    // (event, bg, bgId, instanceId, winner) - Needs to be added to TC
---     BG_EVENT_ON_CREATE                              = 3,    // (event, bg, bgId, instanceId) - Needs to be added to TC
---     BG_EVENT_ON_PRE_DESTROY                         = 4,    // (event, bg, bgId, instanceId) - Needs to be added to TC
---     BG_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (event, function)
--- @proto cancel = (event, function, shots)
---
---
---@param event uint32 @ : [BattleGround] event Id, refer to BGEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterBGEvent(event, func, shots) end

---
--- Registers a [WorldPacket] event handler.
---
--- <pre>
--- enum PacketEvents
--- {
---     PACKET_EVENT_ON_PACKET_RECEIVE          =     5,       // (event, packet, player) - Player only if accessible. Can return false, newPacket
---     PACKET_EVENT_ON_PACKET_RECEIVE_UNKNOWN  =     6,       // Not Implemented
---     PACKET_EVENT_ON_PACKET_SEND             =     7,       // (event, packet, player) - Player only if accessible. Can return false, newPacket
---
---     PACKET_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : opcode
---@param event uint32 @ : packet event Id, refer to PacketEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterPacketEvent(entry, event, func, shots) end

---
--- Registers a [Creature] gossip event handler.
---
--- <pre>
--- enum GossipEvents
--- {
---     GOSSIP_EVENT_ON_HELLO                           = 1,    // (event, player, object) - Object is the Creature/GameObject/Item. Can return false to do default action. For item gossip can return false to stop spell casting.
---     GOSSIP_EVENT_ON_SELECT                          = 2,    // (event, player, object, sender, intid, code, menu_id) - Object is the Creature/GameObject/Item/Player, menu_id is only for player gossip. Can return false to do default action.
---     GOSSIP_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : [Creature] entry Id
---@param event uint32 @ : [Creature] gossip event Id, refer to GossipEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterCreatureGossipEvent(entry, event, func, shots) end

---
--- Registers a [GameObject] gossip event handler.
---
--- <pre>
--- enum GossipEvents
--- {
---     GOSSIP_EVENT_ON_HELLO                           = 1,    // (event, player, object) - Object is the Creature/GameObject/Item. Can return false to do default action. For item gossip can return false to stop spell casting.
---     GOSSIP_EVENT_ON_SELECT                          = 2,    // (event, player, object, sender, intid, code, menu_id) - Object is the Creature/GameObject/Item/Player, menu_id is only for player gossip. Can return false to do default action.
---     GOSSIP_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : [GameObject] entry Id
---@param event uint32 @ : [GameObject] gossip event Id, refer to GossipEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterGameObjectGossipEvent(entry, event, func, shots) end

---
--- Registers an [Item] event handler.
---
--- <pre>
--- enum ItemEvents
--- {
---     ITEM_EVENT_ON_DUMMY_EFFECT                      = 1,    // (event, caster, spellid, effindex, item)
---     ITEM_EVENT_ON_USE                               = 2,    // (event, player, item, target) - Can return false to stop the spell casting
---     ITEM_EVENT_ON_QUEST_ACCEPT                      = 3,    // (event, player, item, quest) - Can return true
---     ITEM_EVENT_ON_EXPIRE                            = 4,    // (event, player, itemid) - Can return true
---     ITEM_EVENT_ON_REMOVE                            = 5,    // (event, player, item) - Can return true
---     ITEM_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : [Item] entry Id
---@param event uint32 @ : [Item] event Id, refer to ItemEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterItemEvent(entry, event, func, shots) end

---
--- Registers an [Item] gossip event handler.
---
--- <pre>
--- enum GossipEvents
--- {
---     GOSSIP_EVENT_ON_HELLO                           = 1,    // (event, player, object) - Object is the Creature/GameObject/Item. Can return false to do default action. For item gossip can return false to stop spell casting.
---     GOSSIP_EVENT_ON_SELECT                          = 2,    // (event, player, object, sender, intid, code, menu_id) - Object is the Creature/GameObject/Item/Player, menu_id is only for player gossip. Can return false to do default action.
---     GOSSIP_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : [Item] entry Id
---@param event uint32 @ : [Item] gossip event Id, refer to GossipEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterItemGossipEvent(entry, event, func, shots) end

---
--- Registers a [Map] event handler for all instance of a [Map].
---
--- <pre>
--- enum InstanceEvents
--- {
---     INSTANCE_EVENT_ON_INITIALIZE                    = 1,    // (event, instance_data, map)
---     INSTANCE_EVENT_ON_LOAD                          = 2,    // (event, instance_data, map)
---     INSTANCE_EVENT_ON_UPDATE                        = 3,    // (event, instance_data, map, diff)
---     INSTANCE_EVENT_ON_PLAYER_ENTER                  = 4,    // (event, instance_data, map, player)
---     INSTANCE_EVENT_ON_CREATURE_CREATE               = 5,    // (event, instance_data, map, creature)
---     INSTANCE_EVENT_ON_GAMEOBJECT_CREATE             = 6,    // (event, instance_data, map, go)
---     INSTANCE_EVENT_ON_CHECK_ENCOUNTER_IN_PROGRESS   = 7,    // (event, instance_data, map)
---     INSTANCE_EVENT_COUNT
--- };
--- </pre>
---
---@param map_id uint32 @ : ID of a [Map]
---@param event uint32 @ : [Map] event ID, refer to MapEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
function RegisterMapEvent(map_id, event, func, shots) end

---
--- Registers a [Map] event handler for one instance of a [Map].
---
--- <pre>
--- enum InstanceEvents
--- {
---     INSTANCE_EVENT_ON_INITIALIZE                    = 1,    // (event, instance_data, map)
---     INSTANCE_EVENT_ON_LOAD                          = 2,    // (event, instance_data, map)
---     INSTANCE_EVENT_ON_UPDATE                        = 3,    // (event, instance_data, map, diff)
---     INSTANCE_EVENT_ON_PLAYER_ENTER                  = 4,    // (event, instance_data, map, player)
---     INSTANCE_EVENT_ON_CREATURE_CREATE               = 5,    // (event, instance_data, map, creature)
---     INSTANCE_EVENT_ON_GAMEOBJECT_CREATE             = 6,    // (event, instance_data, map, go)
---     INSTANCE_EVENT_ON_CHECK_ENCOUNTER_IN_PROGRESS   = 7,    // (event, instance_data, map)
---     INSTANCE_EVENT_COUNT
--- };
--- </pre>
---
---@param instance_id uint32 @ : ID of an instance of a [Map]
---@param event uint32 @ : [Map] event ID, refer to MapEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
function RegisterInstanceEvent(instance_id, event, func, shots) end

---
--- Registers a [Player] gossip event handler.
---
--- Note that you can not use `GOSSIP_EVENT_ON_HELLO` with this hook. It does nothing since players dont have an "on hello".
---
--- <pre>
--- enum GossipEvents
--- {
---     GOSSIP_EVENT_ON_HELLO                           = 1,    // (event, player, object) - Object is the Creature/GameObject/Item. Can return false to do default action. For item gossip can return false to stop spell casting.
---     GOSSIP_EVENT_ON_SELECT                          = 2,    // (event, player, object, sender, intid, code, menu_id) - Object is the Creature/GameObject/Item/Player, menu_id is only for player gossip. Can return false to do default action.
---     GOSSIP_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (menu_id, event, function)
--- @proto cancel = (menu_id, event, function, shots)
---
---
---@param menu_id uint32 @ : [Player] gossip menu Id
---@param event uint32 @ : [Player] gossip event Id, refer to GossipEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterPlayerGossipEvent(menu_id, event, func, shots) end

---
--- Registers a [Creature] event handler.
---
--- <pre>
--- enum CreatureEvents
--- {
---     CREATURE_EVENT_ON_ENTER_COMBAT                    = 1,  // (event, creature, target) - Can return true to stop normal action
---     CREATURE_EVENT_ON_LEAVE_COMBAT                    = 2,  // (event, creature) - Can return true to stop normal action
---     CREATURE_EVENT_ON_TARGET_DIED                     = 3,  // (event, creature, victim) - Can return true to stop normal action
---     CREATURE_EVENT_ON_DIED                            = 4,  // (event, creature, killer) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SPAWN                           = 5,  // (event, creature) - Can return true to stop normal action
---     CREATURE_EVENT_ON_REACH_WP                        = 6,  // (event, creature, type, id) - Can return true to stop normal action
---     CREATURE_EVENT_ON_AIUPDATE                        = 7,  // (event, creature, diff) - Can return true to stop normal action
---     CREATURE_EVENT_ON_RECEIVE_EMOTE                   = 8,  // (event, creature, player, emoteid) - Can return true to stop normal action
---     CREATURE_EVENT_ON_DAMAGE_TAKEN                    = 9,  // (event, creature, attacker, damage) - Can return true to stop normal action, can return new damage as second return value.
---     CREATURE_EVENT_ON_PRE_COMBAT                      = 10, // (event, creature, target) - Can return true to stop normal action
---     // UNUSED
---     CREATURE_EVENT_ON_OWNER_ATTACKED                  = 12, // (event, creature, target) - Can return true to stop normal action            // Not on mangos
---     CREATURE_EVENT_ON_OWNER_ATTACKED_AT               = 13, // (event, creature, attacker) - Can return true to stop normal action          // Not on mangos
---     CREATURE_EVENT_ON_HIT_BY_SPELL                    = 14, // (event, creature, caster, spellid) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SPELL_HIT_TARGET                = 15, // (event, creature, target, spellid) - Can return true to stop normal action
---     // UNUSED                                         = 16, // (event, creature)
---     // UNUSED                                         = 17, // (event, creature)
---     // UNUSED                                         = 18, // (event, creature)
---     CREATURE_EVENT_ON_JUST_SUMMONED_CREATURE          = 19, // (event, creature, summon) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SUMMONED_CREATURE_DESPAWN       = 20, // (event, creature, summon) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SUMMONED_CREATURE_DIED          = 21, // (event, creature, summon, killer) - Can return true to stop normal action    // Not on mangos
---     CREATURE_EVENT_ON_SUMMONED                        = 22, // (event, creature, summoner) - Can return true to stop normal action
---     CREATURE_EVENT_ON_RESET                           = 23, // (event, creature)
---     CREATURE_EVENT_ON_REACH_HOME                      = 24, // (event, creature) - Can return true to stop normal action
---     // UNUSED                                         = 25, // (event, creature)
---     CREATURE_EVENT_ON_CORPSE_REMOVED                  = 26, // (event, creature, respawndelay) - Can return true to stop normal action, can return new respawndelay as second return value
---     CREATURE_EVENT_ON_MOVE_IN_LOS                     = 27, // (event, creature, unit) - Can return true to stop normal action. Does not actually check LOS, just uses the sight range
---     // UNUSED                                         = 28, // (event, creature)
---     // UNUSED                                         = 29, // (event, creature)
---     CREATURE_EVENT_ON_DUMMY_EFFECT                    = 30, // (event, caster, spellid, effindex, creature)
---     CREATURE_EVENT_ON_QUEST_ACCEPT                    = 31, // (event, player, creature, quest) - Can return true
---     // UNUSED                                         = 32, // (event, creature)
---     // UNUSED                                         = 33, // (event, creature)
---     CREATURE_EVENT_ON_QUEST_REWARD                    = 34, // (event, player, creature, quest, opt) - Can return true
---     CREATURE_EVENT_ON_DIALOG_STATUS                   = 35, // (event, player, creature)
---     CREATURE_EVENT_ON_ADD                             = 36, // (event, creature)
---     CREATURE_EVENT_ON_REMOVE                          = 37, // (event, creature)
---     CREATURE_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : the ID of one or more [Creature]s
---@param event uint32 @ : refer to CreatureEvents above
---@param func function @ : function that will be called when the event occurs
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterCreatureEvent(entry, event, func, shots) end

---
--- Registers a [Creature] event handler for a *single* [Creature].
---
--- <pre>
--- enum CreatureEvents
--- {
---     CREATURE_EVENT_ON_ENTER_COMBAT                    = 1,  // (event, creature, target) - Can return true to stop normal action
---     CREATURE_EVENT_ON_LEAVE_COMBAT                    = 2,  // (event, creature) - Can return true to stop normal action
---     CREATURE_EVENT_ON_TARGET_DIED                     = 3,  // (event, creature, victim) - Can return true to stop normal action
---     CREATURE_EVENT_ON_DIED                            = 4,  // (event, creature, killer) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SPAWN                           = 5,  // (event, creature) - Can return true to stop normal action
---     CREATURE_EVENT_ON_REACH_WP                        = 6,  // (event, creature, type, id) - Can return true to stop normal action
---     CREATURE_EVENT_ON_AIUPDATE                        = 7,  // (event, creature, diff) - Can return true to stop normal action
---     CREATURE_EVENT_ON_RECEIVE_EMOTE                   = 8,  // (event, creature, player, emoteid) - Can return true to stop normal action
---     CREATURE_EVENT_ON_DAMAGE_TAKEN                    = 9,  // (event, creature, attacker, damage) - Can return true to stop normal action, can return new damage as second return value.
---     CREATURE_EVENT_ON_PRE_COMBAT                      = 10, // (event, creature, target) - Can return true to stop normal action
---     // UNUSED
---     CREATURE_EVENT_ON_OWNER_ATTACKED                  = 12, // (event, creature, target) - Can return true to stop normal action            // Not on mangos
---     CREATURE_EVENT_ON_OWNER_ATTACKED_AT               = 13, // (event, creature, attacker) - Can return true to stop normal action          // Not on mangos
---     CREATURE_EVENT_ON_HIT_BY_SPELL                    = 14, // (event, creature, caster, spellid) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SPELL_HIT_TARGET                = 15, // (event, creature, target, spellid) - Can return true to stop normal action
---     // UNUSED                                         = 16, // (event, creature)
---     // UNUSED                                         = 17, // (event, creature)
---     // UNUSED                                         = 18, // (event, creature)
---     CREATURE_EVENT_ON_JUST_SUMMONED_CREATURE          = 19, // (event, creature, summon) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SUMMONED_CREATURE_DESPAWN       = 20, // (event, creature, summon) - Can return true to stop normal action
---     CREATURE_EVENT_ON_SUMMONED_CREATURE_DIED          = 21, // (event, creature, summon, killer) - Can return true to stop normal action    // Not on mangos
---     CREATURE_EVENT_ON_SUMMONED                        = 22, // (event, creature, summoner) - Can return true to stop normal action
---     CREATURE_EVENT_ON_RESET                           = 23, // (event, creature)
---     CREATURE_EVENT_ON_REACH_HOME                      = 24, // (event, creature) - Can return true to stop normal action
---     // UNUSED                                         = 25, // (event, creature)
---     CREATURE_EVENT_ON_CORPSE_REMOVED                  = 26, // (event, creature, respawndelay) - Can return true to stop normal action, can return new respawndelay as second return value
---     CREATURE_EVENT_ON_MOVE_IN_LOS                     = 27, // (event, creature, unit) - Can return true to stop normal action. Does not actually check LOS, just uses the sight range
---     // UNUSED                                         = 28, // (event, creature)
---     // UNUSED                                         = 29, // (event, creature)
---     CREATURE_EVENT_ON_DUMMY_EFFECT                    = 30, // (event, caster, spellid, effindex, creature)
---     CREATURE_EVENT_ON_QUEST_ACCEPT                    = 31, // (event, player, creature, quest) - Can return true
---     // UNUSED                                         = 32, // (event, creature)
---     // UNUSED                                         = 33, // (event, creature)
---     CREATURE_EVENT_ON_QUEST_REWARD                    = 34, // (event, player, creature, quest, opt) - Can return true
---     CREATURE_EVENT_ON_DIALOG_STATUS                   = 35, // (event, player, creature)
---     CREATURE_EVENT_ON_ADD                             = 36, // (event, creature)
---     CREATURE_EVENT_ON_REMOVE                          = 37, // (event, creature)
---     CREATURE_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (guid, instance_id, event, function)
--- @proto cancel = (guid, instance_id, event, function, shots)
---
---
---@param guid ObjectGuid @ : the GUID of a single [Creature]
---@param instance_id uint32 @ : the instance ID of a single [Creature]
---@param event uint32 @ : refer to CreatureEvents above
---@param func function @ : function that will be called when the event occurs
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterUniqueCreatureEvent(guid, instance_id, event, func, shots) end

---
--- Registers a [GameObject] event handler.
---
--- <pre>
--- enum GameObjectEvents
--- {
---     GAMEOBJECT_EVENT_ON_AIUPDATE                    = 1,    // (event, go, diff)
---     GAMEOBJECT_EVENT_ON_SPAWN                       = 2,    // (event, go)
---     GAMEOBJECT_EVENT_ON_DUMMY_EFFECT                = 3,    // (event, caster, spellid, effindex, go) - Can return true to stop normal action
---     GAMEOBJECT_EVENT_ON_QUEST_ACCEPT                = 4,    // (event, player, go, quest) - Can return true to stop normal action
---     GAMEOBJECT_EVENT_ON_QUEST_REWARD                = 5,    // (event, player, go, quest, opt) - Can return true to stop normal action
---     GAMEOBJECT_EVENT_ON_DIALOG_STATUS               = 6,    // (event, player, go)
---     GAMEOBJECT_EVENT_ON_DESTROYED                   = 7,    // (event, go, attacker)
---     GAMEOBJECT_EVENT_ON_DAMAGED                     = 8,    // (event, go, attacker)
---     GAMEOBJECT_EVENT_ON_LOOT_STATE_CHANGE           = 9,    // (event, go, state)
---     GAMEOBJECT_EVENT_ON_GO_STATE_CHANGED            = 10,   // (event, go, state)
---     // UNUSED                                       = 11,   // (event, gameobject)
---     GAMEOBJECT_EVENT_ON_ADD                         = 12,   // (event, gameobject)
---     GAMEOBJECT_EVENT_ON_REMOVE                      = 13,   // (event, gameobject)
---     GAMEOBJECT_EVENT_ON_USE                         = 14,   // (event, go, player) - Can return true to stop normal action
---     GAMEOBJECT_EVENT_COUNT
--- };
--- </pre>
---
--- @proto cancel = (entry, event, function)
--- @proto cancel = (entry, event, function, shots)
---
---
---@param entry uint32 @ : [GameObject] entry Id
---@param event uint32 @ : [GameObject] event Id, refer to GameObjectEvents above
---@param func function @ : function to register
---@param shots uint32 @ = 0 : the number of times the function will be called, 0 means "always call this function"
---@return function @ cancel, : a function that cancels the binding when called
function RegisterGameObjectEvent(entry, event, func, shots) end

---
--- Reloads the Lua engine.
function ReloadEluna() end

---
--- Runs a command.
---
---@param command string @ : the command to run
function RunCommand(command) end

---
--- Sends a message to all [Player]s online.
---
---@param message string @ : message to send
function SendWorldMessage(message) end

---
--- Executes a SQL query on the world database and returns an [ElunaQuery].
---
--- The query is always executed synchronously
---   (i.e. execution halts until the query has finished and then results are returned).
---
---     local Q = WorldDBQuery("SELECT entry, name FROM creature_template LIMIT 10")
---     if Q then
---         repeat
---             local entry, name = Q:GetUInt32(0), Q:GetString(1)
---             print(entry, name)
---         until not Q:NextRow()
---     end
---
---@param sql string @ : query to execute
---@return ElunaQuery @ results, or nil if no rows found or nil if no rows found
function WorldDBQuery(sql) end

---
--- Executes a SQL query on the world database.
---
--- The query may be executed *asynchronously* (at a later, unpredictable time).
--- If you need to execute the query synchronously, use [Global:WorldDBQuery] instead.
---
--- Any results produced are ignored.
--- If you need results from the query, use [Global:WorldDBQuery] instead.
---
---     WorldDBExecute("DELETE FROM my_table")
---
---@param sql string @ : query to execute
function WorldDBExecute(sql) end

---
--- Executes a SQL query on the character database and returns an [ElunaQuery].
---
--- The query is always executed synchronously
---   (i.e. execution halts until the query has finished and then results are returned).
---
--- For an example see [Global:WorldDBQuery].
---
---@param sql string @ : query to execute
---@return ElunaQuery @ results, or nil if no rows found
function CharDBQuery(sql) end

---
--- Executes a SQL query on the character database.
---
--- The query may be executed *asynchronously* (at a later, unpredictable time).
--- If you need to execute the query synchronously, use [Global:CharDBQuery] instead.
---
--- Any results produced are ignored.
--- If you need results from the query, use [Global:CharDBQuery] instead.
---
---     CharDBExecute("DELETE FROM my_table")
---
---@param sql string @ : query to execute
function CharDBExecute(sql) end

---
--- Executes a SQL query on the login database and returns an [ElunaQuery].
---
--- The query is always executed synchronously
---   (i.e. execution halts until the query has finished and then results are returned).
---
--- For an example see [Global:WorldDBQuery].
---
---@param sql string @ : query to execute
---@return ElunaQuery @ results, or nil if no rows found
function AuthDBQuery(sql) end

---
--- Executes a SQL query on the login database.
---
--- The query may be executed *asynchronously* (at a later, unpredictable time).
--- If you need to execute the query synchronously, use [Global:AuthDBQuery] instead.
---
--- Any results produced are ignored.
--- If you need results from the query, use [Global:AuthDBQuery] instead.
---
---     AuthDBExecute("DELETE FROM my_table")
---
---@param sql string @ : query to execute
function AuthDBExecute(sql) end

---
--- Registers a global timed event.
---
--- When the passed function is called, the parameters `(eventId, delay, repeats)` are passed to it.
---
--- Repeats will decrease on each call if the event does not repeat indefinitely
---
--- @proto eventId = (function, delay)
--- @proto eventId = (function, delaytable)
--- @proto eventId = (function, delay, repeats)
--- @proto eventId = (function, delaytable, repeats)
---
---@param func function @ : function to trigger when the time has passed
---@param delay uint32 @ : set time in milliseconds for the event to trigger
---@param delaytable table @ : a table `{min, max}` containing the minimum and maximum delay time
---@param repeats uint32 @ = 1 : how many times for the event to repeat, 0 is infinite
---@return int @ eventId, : unique ID for the timed event used to cancel it or nil
function CreateLuaEvent(func, delay, delaytable, repeats) end

---
--- Removes a global timed event specified by ID.
---
---@param eventId int @ : event Id to remove
---@param all_Events bool @ = false : remove from all events, not just global
function RemoveEventById(eventId, all_Events) end

---
--- Removes all global timed events.
---
---@param all_Events bool @ = false : remove all events, not just global
function RemoveEvents(all_Events) end

---
--- Performs an in-game spawn and returns the [Creature] or [GameObject] spawned.
---
---@param spawnType int32 @ : type of object to spawn, 1 = [Creature], 2 = [GameObject]
---@param entry uint32 @ : entry ID of the [Creature] or [GameObject]
---@param mapId uint32 @ : map ID to spawn the [Creature] or [GameObject] in
---@param instanceId uint32 @ : instance ID to put the [Creature] or [GameObject] in. Non instance is 0
---@param x float @ : x coordinate of the [Creature] or [GameObject]
---@param y float @ : y coordinate of the [Creature] or [GameObject]
---@param z float @ : z coordinate of the [Creature] or [GameObject]
---@param o float @ : o facing/orientation of the [Creature] or [GameObject]
---@param save bool @ = false : optional to save the [Creature] or [GameObject] to the database
---@param durorresptime uint32 @ = 0 : despawn time of the [Creature] if it's not saved or respawn time of [GameObject]
---@param phase uint32 @ = 1 : phase to put the [Creature] or [GameObject] in
---@return WorldObject @ worldObject, : returns [Creature] or [GameObject]
function PerformIngameSpawn(spawnType, entry, mapId, instanceId, x, y, z, o, save, durorresptime, phase) end

---
--- Creates a [WorldPacket].
---
---@param opcode Opcodes @ : the opcode of the packet
---@param size uint32 @ : the size of the packet
---@return WorldPacket @ packet
function CreatePacket(opcode, size) end

---
--- Adds an [Item] to a vendor and updates the world database.
---
---@param entry uint32 @ : [Creature] entry Id
---@param item uint32 @ : [Item] entry Id
---@param maxcount int32 @ : max [Item] stack count
---@param incrtime uint32 @ : combined with maxcount, incrtime tells how often (in seconds) the vendor list is refreshed and the limited [Item] copies are restocked
---@param extendedcost uint32 @ : unique cost of an [Item], such as conquest points for example
function AddVendorItem(entry, item, maxcount, incrtime, extendedcost) end

---
--- Removes an [Item] from a vendor and updates the database.
---
---@param entry uint32 @ : [Creature] entry Id
---@param item uint32 @ : [Item] entry Id
function VendorRemoveItem(entry, item) end

---
--- Removes all [Item]s from a vendor and updates the database.
---
---@param entry uint32 @ : [Creature] entry Id
function VendorRemoveAllItems(entry) end

---
--- Kicks a [Player] from the server.
---
---@param player Player @ : [Player] to kick
function Kick(player) end

---
--- Ban's a [Player]'s account, character or IP
---
---     enum BanMode
---     {
---         BAN_ACCOUNT = 0,
---         BAN_CHARACTER = 1,
---         BAN_IP = 2
---     };
---
---@param banMode BanMode @ : method of ban, refer to BanMode above
---@param nameOrIP string @ : If BanMode is 0 then accountname, if 1 then charactername if 2 then ip
---@param duration uint32 @ : duration (in seconds) of the ban
---@param reason string @ = "" : ban reason, this is optional
---@param whoBanned string @ = "" : the [Player]'s name that banned the account, character or IP, this is optional
---@return int @ result, : status of the ban. 0 if success, 1 if syntax error, 2 if target not found, 3 if a longer ban already exists, nil if unknown result
function Ban(banMode, nameOrIP, duration, reason, whoBanned) end

---
--- Saves all [Player]s.
function SaveAllPlayers() end

---
--- Sends mail to a [Player].
---
--- There can be several item entry-amount pairs at the end of the function.
--- There can be maximum of 12 different items.
---
---     enum MailStationery
---     {
---         MAIL_STATIONERY_TEST = 1,
---         MAIL_STATIONERY_DEFAULT = 41,
---         MAIL_STATIONERY_GM = 61,
---         MAIL_STATIONERY_AUCTION = 62,
---         MAIL_STATIONERY_VAL = 64, // Valentine
---         MAIL_STATIONERY_CHR = 65, // Christmas
---         MAIL_STATIONERY_ORP = 67 // Orphan
---     };
---
---@param subject string @ : title (subject) of the mail
---@param text string @ : contents of the mail
---@param receiverGUIDLow uint32 @ : low GUID of the receiver
---@param senderGUIDLow uint32 @ = 0 : low GUID of the sender
---@param stationary MailStationery @ = MAIL_STATIONERY_DEFAULT : type of mail that is being sent as, refer to MailStationery above
---@param delay uint32 @ = 0 : mail send delay in milliseconds
---@param money uint32 @ = 0 : money to send
---@param cod uint32 @ = 0 : cod money amount
---@param entry uint32 @ = 0 : entry of an [Item] to send with mail
---@param amount uint32 @ = 0 : amount of the [Item] to send with mail
---@return uint32 @ itemGUIDlow, : low GUID of the item. Up to 12 values returned, returns nil if no further items are sent
function SendMail(subject, text, receiverGUIDLow, senderGUIDLow, stationary, delay, money, cod, entry, amount) end

---
--- Performs a bitwise AND (a & b).
---
---@param a uint32
---@param b uint32
---@return uint32 @ result
function bit(a, b) end

---
--- Performs a bitwise OR (a | b).
---
---@param a uint32
---@param b uint32
---@return uint32 @ result
function bit(a, b) end

---
--- Performs a bitwise left-shift (a << b).
---
---@param a uint32
---@param b uint32
---@return uint32 @ result
function bit(a, b) end

---
--- Performs a bitwise right-shift (a >> b).
---
---@param a uint32
---@param b uint32
---@return uint32 @ result
function bit(a, b) end

---
--- Performs a bitwise XOR (a ^ b).
---
---@param a uint32
---@param b uint32
---@return uint32 @ result
function bit(a, b) end

---
--- Performs a bitwise NOT (~a).
---
---@param a uint32
---@return uint32 @ result
function bit(a) end

---
--- Adds a taxi path to a specified map, returns the used pathId.
---
--- Note that the first taxi point needs to be near the player when he starts the taxi path.
--- The function should also be used only **once** per path added so use it on server startup for example.
---
--- Related function: [Player:StartTaxi]
---
---     -- Execute on startup
---     local pathTable = {{mapid, x, y, z}, {mapid, x, y, z}}
---     local path = AddTaxiPath(pathTable, 28135, 28135)
---
---     -- Execute when the player should fly
---     player:StartTaxi(path)
---
---@param waypoints table @ : table containing waypoints: {map, x, y, z[, actionFlag, delay]}
---@param mountA uint32 @ : alliance [Creature] entry
---@param mountH uint32 @ : horde [Creature] entry
---@param price uint32 @ = 0 : price of the taxi path
---@param pathId uint32 @ = 0 : path Id of the taxi path
---@return uint32 @ actualPathId
function AddTaxiPath(waypoints, mountA, mountH, price, pathId) end

---
--- Returns `true` if the bag and slot is a valid inventory position, otherwise `false`.
---
--- Some commonly used combinations:
---
--- *Bag 255 (common character inventory)*
---
--- - Slots 0-18: equipment
--- - Slots 19-22: bag slots
--- - Slots 23-38: backpack
--- - Slots 39-66: bank main slots
--- - Slots 67-74: bank bag slots
--- - Slots 86-117: keyring
---
--- *Bags 19-22 (equipped bags)*
---
--- - Slots 0-35
---
--- *Bags 67-74 (bank bags)*
---
--- - Slots 0-35
---
---@param bag uint8 @ : the bag the [Item] is in, you can get this with [Item:GetBagSlot]
---@param slot uint8 @ : the slot the [Item] is in within the bag, you can get this with [Item:GetSlot]
---@return bool @ isInventoryPos
function IsInventoryPos(bag, slot) end

---
--- Returns `true` if the bag and slot is a valid equipment position, otherwise `false`.
---
--- See [Global:IsInventoryPos] for bag/slot combination examples.
---
---@param bag uint8 @ : the bag the [Item] is in, you can get this with [Item:GetBagSlot]
---@param slot uint8 @ : the slot the [Item] is in within the bag, you can get this with [Item:GetSlot]
---@return bool @ isEquipmentPosition
function IsEquipmentPos(bag, slot) end

---
--- Returns `true` if the bag and slot is a valid bank position, otherwise `false`.
---
--- See [Global:IsInventoryPos] for bag/slot combination examples.
---
---@param bag uint8 @ : the bag the [Item] is in, you can get this with [Item:GetBagSlot]
---@param slot uint8 @ : the slot the [Item] is in within the bag, you can get this with [Item:GetSlot]
---@return bool @ isBankPosition
function IsBankPos(bag, slot) end

---
--- Returns `true` if the bag and slot is a valid bag position, otherwise `false`.
---
--- See [Global:IsInventoryPos] for bag/slot combination examples.
---
---@param bag uint8 @ : the bag the [Item] is in, you can get this with [Item:GetBagSlot]
---@param slot uint8 @ : the slot the [Item] is in within the bag, you can get this with [Item:GetSlot]
---@return bool @ isBagPosition
function IsBagPos(bag, slot) end

---
--- Returns `true` if the event is currently active, otherwise `false`.
---
---@param eventId uint16 @ : the event id to check.
---@return bool @ isActive
function IsGameEventActive(eventId) end

---
--- Returns the server's current time.
---
---@return uint32 @ currTime, : the current time, in milliseconds
function GetCurrTime() end

---
--- Returns the difference between an old timestamp and the current time.
---
---@param oldTime uint32 @ : an old timestamp, in milliseconds
---@return uint32 @ timeDiff, : the difference, in milliseconds
function GetTimeDiff(oldTime) end

---
--- Prints given parameters to the info log.
---
---@vararg any
function PrintInfo() end

---
--- Prints given parameters to the error log.
---
---@vararg any
function PrintError() end

---
--- Prints given parameters to the debug log.
---
---@vararg any
function PrintDebug() end

---
--- tarts the event by eventId, if force is set, the event will force start regardless of previous event state.
---
---@param eventId uint16 @ : the event id to start.
---@param force bool @ = false : set `true` to force start the event.
function StartGameEvent(eventId, force) end

---
--- tops the event by eventId, if force is set, the event will force stop regardless of previous event state.
---
---@param eventId uint16 @ : the event id to stop.
---@param force bool @ = false : set `true` to force stop the event.
function StopGameEvent(eventId, force) end

---
--- Performs a non-blocking HTTP request.
---
--- When the passed callback function is called, the parameters `(status, body, headers)` are passed to it.
---
---     -- GET example (prints a random word)
---     HttpRequest("GET", "https://random-word-api.herokuapp.com/word", function(status, body, headers)
---         print("Random word: " .. string.sub(body, 3, body:len() - 2))
---     end)
---
---     -- POST example with JSON request body
---     HttpRequest("POST", "https://jsonplaceholder.typicode.com/posts", '{"userId": 1,"title": "Foo","body": "Bar!"}', "application/json", function(status, body, headers)
---         print(body)
---     end)
---
---     -- Example with request headers
---     HttpRequest("GET", "https://postman-echo.com/headers", { Accept = "application/json", ["User-Agent"] = "Eluna Lua Engine" }, function(status, body, headers)
---         print(body)
---     end)
---
--- @proto (httpMethod, url, function)
--- @proto (httpMethod, url, headers, function)
--- @proto (httpMethod, url, body, contentType, function)
--- @proto (httpMethod, url, body, contentType, headers, function)
---
---@param httpMethod string @ : the HTTP method to use (possible values are: `"GET"`, `"HEAD"`, `"POST"`, `"PUT"`, `"PATCH"`, `"DELETE"`, `"OPTIONS"`)
---@param url string @ : the URL to query
---@param headers table @ : a table with string key-value pairs containing the request headers
---@param body string @ : the request's body (only used for POST, PUT and PATCH requests)
---@param contentType string @ : the body's content-type
---@param func function @ : function that will be called when the request is executed
function HttpRequest(httpMethod, url, headers, body, contentType, func) end

---
--- Returns an object representing a `long long` (64-bit) value.
---
--- The value by default is 0, but can be initialized to a value by passing a number or long long as a string.
---
--- @proto value = ()
--- @proto value = (n)
--- @proto value = (n_ll)
--- @proto value = (n_str)
---@param n int32
---@param n_ll int64
---@param n_str string
---@return int64 @ value
function CreateLongLong(n, n_ll, n_str) end

---
--- Returns an object representing an `unsigned long long` (64-bit) value.
---
--- The value by default is 0, but can be initialized to a value by passing a number or unsigned long long as a string.
---
--- @proto value = ()
--- @proto value = (n)
--- @proto value = (n_ull)
--- @proto value = (n_str)
---@param n uint32
---@param n_ull uint64
---@param n_str string
---@return uint64 @ value
function CreateULongLong(n, n_ull, n_str) end

---
--- Unbinds event handlers for either all [BattleGround] events, or one type of event.
---
--- If `event_type` is `nil`, all [BattleGround] event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto ()
--- @proto (event_type)
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterBGEvent]
function ClearBattleGroundEvents(event_type) end

---
--- Unbinds event handlers for either all of a [Creature]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the [Creature]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [Creature], not just one.
--- To bind and unbind events to a single [Creature], see [Global:RegisterUniqueCreatureEvent] and [Global:ClearUniqueCreatureEvents].
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of one or more [Creature]s whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterCreatureEvent]
function ClearCreatureEvents(entry, event_type) end

---
--- Unbinds event handlers for either all of a [Creature]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the [Creature]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect only a single [Creature].
--- To bind and unbind events to all instances of a [Creature], see [Global:RegisterCreatureEvent] and [Global:ClearCreatureEvent].
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param guid ObjectGuid @ : the GUID of a single [Creature] whose handlers will be cleared
---@param instance_id uint32 @ : the instance ID of a single [Creature] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterCreatureEvent]
function ClearUniqueCreatureEvents(guid, instance_id, event_type) end

---
--- Unbinds event handlers for either all of a [Creature]'s gossip events, or one type of event.
---
--- If `event_type` is `nil`, all the [Creature]'s gossip event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [Creature], not just one.
--- To bind and unbind gossip events to a single [Creature], tell the Eluna developers to implement that.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of a [Creature] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterCreatureGossipEvent]
function ClearCreatureGossipEvents(entry, event_type) end

---
--- Unbinds event handlers for either all of a [GameObject]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the [GameObject]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [GameObject], not just one.
--- To bind and unbind events to a single [GameObject], tell the Eluna developers to implement that.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of a [GameObject] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterGameObjectEvent]
function ClearGameObjectEvents(entry, event_type) end

---
--- Unbinds event handlers for either all of a [GameObject]'s gossip events, or one type of event.
---
--- If `event_type` is `nil`, all the [GameObject]'s gossip event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [GameObject], not just one.
--- To bind and unbind gossip events to a single [GameObject], tell the Eluna developers to implement that.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of a [GameObject] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterGameObjectGossipEvent]
function ClearGameObjectGossipEvents(entry, event_type) end

---
--- Unbinds event handlers for either all [Group] events, or one type of [Group] event.
---
--- If `event_type` is `nil`, all [Group] event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto ()
--- @proto (event_type)
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterGroupEvent]
function ClearGroupEvents(event_type) end

---
--- Unbinds event handlers for either all [Guild] events, or one type of [Guild] event.
---
--- If `event_type` is `nil`, all [Guild] event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto ()
--- @proto (event_type)
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterGuildEvent]
function ClearGuildEvents(event_type) end

---
--- Unbinds event handlers for either all of an [Item]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the [Item]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [Item], not just one.
--- To bind and unbind events to a single [Item], tell the Eluna developers to implement that.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of an [Item] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterItemEvent]
function ClearItemEvents(entry, event_type) end

---
--- Unbinds event handlers for either all of an [Item]'s gossip events, or one type of event.
---
--- If `event_type` is `nil`, all the [Item]'s gossip event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- **NOTE:** this will affect all instances of the [Item], not just one.
--- To bind and unbind gossip events to a single [Item], tell the Eluna developers to implement that.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the ID of an [Item] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterItemGossipEvent]
function ClearItemGossipEvents(entry, event_type) end

---
--- Unbinds event handlers for either all of a [WorldPacket] opcode's events, or one type of event.
---
--- If `event_type` is `nil`, all the [WorldPacket] opcode's event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto (opcode)
--- @proto (opcode, event_type)
---@param opcode uint32 @ : the type of [WorldPacket] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterPacketEvent]
function ClearPacketEvents(opcode, event_type) end

---
--- Unbinds event handlers for either all [Player] events, or one type of [Player] event.
---
--- If `event_type` is `nil`, all [Player] event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto ()
--- @proto (event_type)
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterPlayerEvent]
function ClearPlayerEvents(event_type) end

---
--- Unbinds event handlers for either all of a [Player]'s gossip events, or one type of event.
---
--- If `event_type` is `nil`, all the [Player]'s gossip event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto (entry)
--- @proto (entry, event_type)
---@param entry uint32 @ : the low GUID of a [Player] whose handlers will be cleared
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterPlayerGossipEvent]
function ClearPlayerGossipEvents(entry, event_type) end

---
--- Unbinds event handlers for either all server events, or one type of event.
---
--- If `event_type` is `nil`, all server event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto ()
--- @proto (event_type)
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterServerEvent]
function ClearServerEvents(event_type) end

---
--- Unbinds event handlers for either all of a non-instanced [Map]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the non-instanced [Map]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto (map_id)
--- @proto (map_id, event_type)
---@param map_id uint32 @ : the ID of a [Map]
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterPlayerGossipEvent]
function ClearMapEvents(map_id, event_type) end

---
--- Unbinds event handlers for either all of an instanced [Map]'s events, or one type of event.
---
--- If `event_type` is `nil`, all the instanced [Map]'s event handlers are cleared.
---
--- Otherwise, only event handlers for `event_type` are cleared.
---
--- @proto (instance_id)
--- @proto (instance_id, event_type)
---@param entry uint32 @ : the ID of an instance of a [Map]
---@param event_type uint32 @ : the event whose handlers will be cleared, see [Global:RegisterInstanceEvent]
function ClearInstanceEvents(entry, event_type) end

