-- Code generated by eluna-annotations-generator, PLEASE DO NOT EDIT

---@class Unit
local Unit = {}

---
--- The [Unit] tries to attack a given target
---
---@param who Unit @ : [Unit] to attack
---@param meleeAttack bool @ = false: attack with melee or not
---@return didAttack @ :, if the [Unit] did not attack
function Unit:Attack(who, meleeAttack) end

---
--- The [Unit] stops attacking its target
---
---@return bool @ isAttacking, : if the [Unit] wasn't attacking already
function Unit:AttackStop() end

---
--- Returns true if the [Unit] is standing.
---
---@return bool @ isStanding
function Unit:IsStandState() end

---
--- Returns true if the [Unit] is mounted.
---
---@return bool @ isMounted
function Unit:IsMounted() end

---
--- Returns true if the [Unit] is rooted.
---
---@return bool @ isRooted
function Unit:IsRooted() end

---
--- Returns true if the [Unit] has full health.
---
---@return bool @ hasFullHealth
function Unit:IsFullHealth() end

---
--- Returns true if the [Unit] is in an accessible place for the given [Creature].
---
---@param obj WorldObject
---@param radius float
---@return bool @ isAccessible
function Unit:IsInAccessiblePlaceFor(obj, radius) end

---
--- Returns true if the [Unit] an auctioneer.
---
---@return bool @ isAuctioneer
function Unit:IsAuctioneer() end

---
--- Returns true if the [Unit] a guild master.
---
---@return bool @ isGuildMaster
function Unit:IsGuildMaster() end

---
--- Returns true if the [Unit] an innkeeper.
---
---@return bool @ isInnkeeper
function Unit:IsInnkeeper() end

---
--- Returns true if the [Unit] a trainer.
---
---@return bool @ isTrainer
function Unit:IsTrainer() end

---
--- Returns true if the [Unit] is able to show a gossip window.
---
---@return bool @ hasGossip
function Unit:IsGossip() end

---
--- Returns true if the [Unit] is a taxi master.
---
---@return bool @ isTaxi
function Unit:IsTaxi() end

---
--- Returns true if the [Unit] is a spirit healer.
---
---@return bool @ isSpiritHealer
function Unit:IsSpiritHealer() end

---
--- Returns true if the [Unit] is a spirit guide.
---
---@return bool @ isSpiritGuide
function Unit:IsSpiritGuide() end

---
--- Returns true if the [Unit] is a tabard designer.
---
---@return bool @ isTabardDesigner
function Unit:IsTabardDesigner() end

---
--- Returns true if the [Unit] provides services like vendor, training and auction.
---
---@return bool @ isTabardDesigner
function Unit:IsServiceProvider() end

---
--- Returns true if the [Unit] is a spirit guide or spirit healer.
---
---@return bool @ isSpiritService
function Unit:IsSpiritService() end

---
--- Returns true if the [Unit] is alive.
---
---@return bool @ isAlive
function Unit:IsAlive() end

---
--- Returns true if the [Unit] is dead.
---
---@return bool @ isDead
function Unit:IsDead() end

---
--- Returns true if the [Unit] is dying.
---
---@return bool @ isDying
function Unit:IsDying() end

---
--- Returns true if the [Unit] is a banker.
---
---@return bool @ isBanker
function Unit:IsBanker() end

---
--- Returns true if the [Unit] is a vendor.
---
---@return bool @ isVendor
function Unit:IsVendor() end

---
--- Returns true if the [Unit] is a battle master.
---
---@return bool @ isBattleMaster
function Unit:IsBattleMaster() end

---
--- Returns true if the [Unit] is a charmed.
---
---@return bool @ isCharmed
function Unit:IsCharmed() end

---
--- Returns true if the [Unit] is an armorer and can repair equipment.
---
---@return bool @ isArmorer
function Unit:IsArmorer() end

---
--- Returns true if the [Unit] is attacking a player.
---
---@return bool @ isAttackingPlayer
function Unit:IsAttackingPlayer() end

---
--- Returns true if the [Unit] flagged for PvP.
---
---@return bool @ isPvP
function Unit:IsPvPFlagged() end

---
--- Returns true if the [Unit] is on a [Vehicle].
---
---@return bool @ isOnVehicle
function Unit:IsOnVehicle() end

---
--- Returns true if the [Unit] is in combat.
---
---@return bool @ inCombat
function Unit:IsInCombat() end

---
--- Returns true if the [Unit] is under water.
---
---@return bool @ underWater
function Unit:IsUnderWater() end

---
--- Returns true if the [Unit] is in water.
---
---@return bool @ inWater
function Unit:IsInWater() end

---
--- Returns true if the [Unit] is not moving.
---
---@return bool @ notMoving
function Unit:IsStopped() end

---
--- Returns true if the [Unit] is a quest giver.
---
---@return bool @ questGiver
function Unit:IsQuestGiver() end

---
--- Returns true if the [Unit]'s health is below the given percentage.
---
---@param healthpct int32 @ : percentage in integer from
---@return bool @ isBelow
function Unit:HealthBelowPct(healthpct) end

---
--- Returns true if the [Unit]'s health is above the given percentage.
---
---@param healthpct int32 @ : percentage in integer from
---@return bool @ isAbove
function Unit:HealthAbovePct(healthpct) end

---
--- Returns true if the [Unit] has an aura from the given spell entry.
---
---@param spell uint32 @ : entry of the aura spell
---@return bool @ hasAura
function Unit:HasAura(spell) end

---
--- Returns true if the [Unit] is casting a spell
---
---@return bool @ isCasting
function Unit:IsCasting() end

---
--- Returns true if the [Unit] has the given unit state.
---
---@param state UnitState @ : an unit state
---@return bool @ hasState
function Unit:HasUnitState(state) end

---
--- Returns the [Unit]'s owner.
---
---@return Unit @ owner
function Unit:GetOwner() end

---
--- Returns the [Unit]'s owner's GUID.
---
---@return ObjectGuid @ ownerGUID
function Unit:GetOwnerGUID() end

---
--- Returns the [Unit]'s mount's modelID.
---
---@return uint32 @ mountId, : displayId of the mount
function Unit:GetMountId() end

---
--- Returns the [Unit]'s creator's GUID.
---
---@return ObjectGuid @ creatorGUID
function Unit:GetCreatorGUID() end

---
--- Returns the [Unit]'s charmer's GUID.
---
---@return ObjectGuid @ charmerGUID
function Unit:GetCharmerGUID() end

---
--- Returns the GUID of the [Unit]'s charmed entity.
---
---@return ObjectGuid @ charmedGUID
function Unit:GetCharmGUID() end

---
--- Returns the GUID of the [Unit]'s pet.
---
---@return ObjectGuid @ petGUID
function Unit:GetPetGUID() end

---
--- Returns the GUID of the [Unit]'s charmer or owner.
---
---@return ObjectGuid @ controllerGUID
function Unit:GetControllerGUID() end

---
--- Returns the GUID of the [Unit]'s charmer or owner or its own GUID.
---
---@return ObjectGuid @ controllerGUID
function Unit:GetControllerGUIDS() end

---
--- Returns [Unit]'s specified stat
---
---@param statType uint32
---@return float @ stat
function Unit:GetStat(statType) end

---
--- Returns the [Unit]'s base spell power
---
---@param spellSchool uint32
---@return uint32 @ spellPower
function Unit:GetBaseSpellPower(spellSchool) end

---
--- Returns the [Unit]'s current victim target or nil.
---
---@return Unit @ victim
function Unit:GetVictim() end

---
--- Returns the currently casted [Spell] of given type or nil.
---
--- <pre>
--- enum CurrentSpellTypes
--- {
---     CURRENT_MELEE_SPELL             = 0,
---     CURRENT_GENERIC_SPELL           = 1,
---     CURRENT_CHANNELED_SPELL         = 2,
---     CURRENT_AUTOREPEAT_SPELL        = 3
--- };
--- </pre>
---
---@param spellType CurrentSpellTypes
---@return Spell @ castedSpell
function Unit:GetCurrentSpell(spellType) end

---
--- Returns the [Unit]'s current stand state.
---
---@return uint8 @ standState
function Unit:GetStandState() end

---
--- Returns the [Unit]'s current display ID.
---
---@return uint32 @ displayId
function Unit:GetDisplayId() end

---
--- Returns the [Unit]'s native/original display ID.
---
---@return uint32 @ displayId
function Unit:GetNativeDisplayId() end

---
--- Returns the [Unit]'s level.
---
---@return uint8 @ level
function Unit:GetLevel() end

---
--- Returns the [Unit]'s health amount.
---
---@return uint32 @ healthAmount
function Unit:GetHealth() end

---
--- Returns the [Unit]'s power amount for given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
---@return uint32 @ powerAmount
function Unit:GetPower(type) end

---
--- Returns the [Unit]'s max power amount for given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
---@return uint32 @ maxPowerAmount
function Unit:GetMaxPower(type) end

---
--- Returns the [Unit]'s power percent for given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
---@return float @ powerPct
function Unit:GetPowerPct(type) end

---
--- Returns the [Unit]'s current power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@return Powers @ powerType
function Unit:GetPowerType() end

---
--- Returns the [Unit]'s max health.
---
---@return uint32 @ maxHealth
function Unit:GetMaxHealth() end

---
--- Returns the [Unit]'s health percent.
---
---@return float @ healthPct
function Unit:GetHealthPct() end

---
--- Returns the [Unit]'s gender.
---
---@return uint8 @ gender, : 0 for male, 1 for female and 2 for none
function Unit:GetGender() end

---
--- Returns the [Unit]'s race ID.
---
---@return Races @ race
function Unit:GetRace() end

---
--- Returns the [Unit]'s class ID.
---
---@return Classes @ class
function Unit:GetClass() end

---
--- eturns the race mask
---
---@return uint32 @ racemask
function Unit:GetRaceMask() end

---
--- eturns the class mask
---
---@return uint32 @ classmask
function Unit:GetClassMask() end

---
--- Returns the [Unit]'s creature type ID (enumerated in CreatureType.dbc).
---
--- <pre>
--- enum CreatureType
--- {
---     CREATURE_TYPE_BEAST            = 1,
---     CREATURE_TYPE_DRAGONKIN        = 2,
---     CREATURE_TYPE_DEMON            = 3,
---     CREATURE_TYPE_ELEMENTAL        = 4,
---     CREATURE_TYPE_GIANT            = 5,
---     CREATURE_TYPE_UNDEAD           = 6,
---     CREATURE_TYPE_HUMANOID         = 7,
---     CREATURE_TYPE_CRITTER          = 8,
---     CREATURE_TYPE_MECHANICAL       = 9,
---     CREATURE_TYPE_NOT_SPECIFIED    = 10,
---     CREATURE_TYPE_TOTEM            = 11,
---     CREATURE_TYPE_NON_COMBAT_PET   = 12,     // This and below is TBC+
---     CREATURE_TYPE_GAS_CLOUD        = 13
--- };
--- </pre>
---
---@return CreatureType @ creatureType
function Unit:GetCreatureType() end

---
--- Returns the [Unit]'s class' name in given or default locale or nil.
---
--- <pre>
--- enum LocaleConstant
--- {
---     LOCALE_enUS = 0,
---     LOCALE_koKR = 1,
---     LOCALE_frFR = 2,
---     LOCALE_deDE = 3,
---     LOCALE_zhCN = 4,
---     LOCALE_zhTW = 5,
---     LOCALE_esES = 6,
---     LOCALE_esMX = 7,
---     LOCALE_ruRU = 8
--- };
--- </pre>
---
---@param locale LocaleConstant @ = DEFAULT_LOCALE
---@return string @ className, : class name or nil
function Unit:GetClassAsString(locale) end

---
--- Returns the [Unit]'s race's name in given or default locale or nil.
---
--- <pre>
--- enum LocaleConstant
--- {
---     LOCALE_enUS = 0,
---     LOCALE_koKR = 1,
---     LOCALE_frFR = 2,
---     LOCALE_deDE = 3,
---     LOCALE_zhCN = 4,
---     LOCALE_zhTW = 5,
---     LOCALE_esES = 6,
---     LOCALE_esMX = 7,
---     LOCALE_ruRU = 8
--- };
--- </pre>
---
---@param locale LocaleConstant @ = DEFAULT_LOCALE : locale to return the race name in
---@return string @ raceName, : race name or nil
function Unit:GetRaceAsString(locale) end

---
--- Returns the [Unit]'s faction ID.
---
---@return uint32 @ faction
function Unit:GetFaction() end

---
--- Returns the [Aura] of the given spell entry on the [Unit] or nil.
---
---@param spellID uint32 @ : entry of the aura spell
---@return Aura @ aura, : aura object or nil
function Unit:GetAura(spellID) end

---
--- Returns a table containing friendly [Unit]'s within given range of the [Unit].
---
---@param range float @ = 533.333 : search radius
---@return table @ friendyUnits, : table filled with friendly units
function Unit:GetFriendlyUnitsInRange(range) end

---
--- Returns a table containing unfriendly [Unit]'s within given range of the [Unit].
---
---@param range float @ = 533.333 : search radius
---@return table @ unfriendyUnits, : table filled with unfriendly units
function Unit:GetUnfriendlyUnitsInRange(range) end

---
--- Returns [Unit]'s [Vehicle] methods
---
---@return Vehicle @ vehicle
function Unit:GetVehicleKit() end

---
--- Returns the Critter Guid
---
---@return ObjectGuid @ critterGuid
function Unit:GetCritterGUID() end

---
--- Returns the [Unit]'s speed of given [UnitMoveType].
---
--- <pre>
--- enum UnitMoveType
--- {
---     MOVE_WALK           = 0,
---     MOVE_RUN            = 1,
---     MOVE_RUN_BACK       = 2,
---     MOVE_SWIM           = 3,
---     MOVE_SWIM_BACK      = 4,
---     MOVE_TURN_RATE      = 5,
---     MOVE_FLIGHT         = 6,
---     MOVE_FLIGHT_BACK    = 7,
---     MOVE_PITCH_RATE     = 8
--- };
--- </pre>
---
---@param type UnitMoveType
---@return float @ speed
function Unit:GetSpeed(type) end

---
--- Returns the current movement type for this [Unit].
---
--- <pre>
--- enum MovementGeneratorType
--- {
---     IDLE_MOTION_TYPE                = 0,
---     RANDOM_MOTION_TYPE              = 1,
---     WAYPOINT_MOTION_TYPE            = 2,
---     MAX_DB_MOTION_TYPE              = 3,
---     ANIMAL_RANDOM_MOTION_TYPE       = 3, // TC
---
---     CONFUSED_MOTION_TYPE            = 4,
---     CHASE_MOTION_TYPE               = 5,
---     HOME_MOTION_TYPE                = 6,
---     FLIGHT_MOTION_TYPE              = 7,
---     POINT_MOTION_TYPE               = 8,
---     FLEEING_MOTION_TYPE             = 9,
---     DISTRACT_MOTION_TYPE            = 10,
---     ASSISTANCE_MOTION_TYPE          = 11,
---     ASSISTANCE_DISTRACT_MOTION_TYPE = 12,
---     TIMED_FLEEING_MOTION_TYPE       = 13,
---     FOLLOW_MOTION_TYPE              = 14,
---     EFFECT_MOTION_TYPE              = 15, // mangos
---     ROTATE_MOTION_TYPE              = 15, // TC
---     EFFECT_MOTION_TYPE              = 16, // TC
---     NULL_MOTION_TYPE                = 17, // TC
--- };
--- </pre>
---
---@return MovementGeneratorType @ movementType
function Unit:GetMovementType() end

---
--- Sets the [Unit]'s owner GUID to given GUID.
---
---@param guid ObjectGuid @ : new owner guid
function Unit:SetOwnerGUID(guid) end

---
--- Sets the [Unit]'s PvP on or off.
---
---@param apply bool @ = true : true if set on, false if off
function Unit:SetPvP(apply) end

---
--- Sets the [Unit]'s sheath state.
---
---     enum SheathState
---     {
---         SHEATH_STATE_UNARMED  = 0, // non prepared weapon
---         SHEATH_STATE_MELEE    = 1, // prepared melee weapon
---         SHEATH_STATE_RANGED   = 2  // prepared ranged weapon
---     };
---
---@param sheathState SheathState @ : valid SheathState
function Unit:SetSheath(sheathState) end

---
--- Sets the [Unit]'s name internally.
---
---@param name string @ : new name
function Unit:SetName(name) end

---
--- Sets the [Unit]'s speed of given [UnitMoveType] to given rate.
--- If forced, packets sent to clients forcing the visual change.
---
--- <pre>
--- enum UnitMoveType
--- {
---     MOVE_WALK           = 0,
---     MOVE_RUN            = 1,
---     MOVE_RUN_BACK       = 2,
---     MOVE_SWIM           = 3,
---     MOVE_SWIM_BACK      = 4,
---     MOVE_TURN_RATE      = 5,
---     MOVE_FLIGHT         = 6,
---     MOVE_FLIGHT_BACK    = 7,
---     MOVE_PITCH_RATE     = 8
--- };
--- </pre>
---
---@param type UnitMoveType
---@param rate float
---@param forced bool @ = false
function Unit:SetSpeed(type, rate, forced) end

---
--- Sets the [Unit]'s faction.
---
---@param faction uint32 @ : new faction ID
function Unit:SetFaction(faction) end

---
--- Sets the [Unit]'s level.
---
---@param level uint8 @ : new level
function Unit:SetLevel(level) end

---
--- Sets the [Unit]'s health.
---
---@param health uint32 @ : new health
function Unit:SetHealth(health) end

---
--- Sets the [Unit]'s max health.
---
---@param maxHealth uint32 @ : new max health
function Unit:SetMaxHealth(maxHealth) end

---
--- Sets the [Unit]'s power amount for the given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param amount uint32 @ : new power amount
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
function Unit:SetPower(amount, type) end

---
--- modifies the [Unit]'s power amount for the given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param amount int32 @ : amount to modify
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
function Unit:ModifyPower(amount, type) end

---
--- Sets the [Unit]'s max power amount for the given power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param type int @ = -1 : a valid power type from [Powers] or -1 for the [Unit]'s current power type
---@param maxPower uint32 @ : new max power amount
function Unit:SetMaxPower(type, maxPower) end

---
--- Sets the [Unit]'s power type.
---
---     enum Powers
---     {
---         POWER_MANA        = 0,
---         POWER_RAGE        = 1,
---         POWER_FOCUS       = 2,
---         POWER_ENERGY      = 3,
---         POWER_HAPPINESS   = 4,
---         POWER_RUNE        = 5,
---         POWER_RUNIC_POWER = 6,
---         MAX_POWERS        = 7,
---         POWER_ALL         = 127,         // default for class?
---         POWER_HEALTH      = 0xFFFFFFFE   // (-2 as signed value)
---     };
---
---@param type Powers @ : a valid power type
function Unit:SetPowerType(type) end

---
--- Sets the [Unit]'s modelID.
---
---@param displayId uint32
function Unit:SetDisplayId(displayId) end

---
--- Sets the [Unit]'s native/default modelID.
---
---@param displayId uint32
function Unit:SetNativeDisplayId(displayId) end

---
--- Sets the [Unit]'s facing/orientation.
---
---@param orientation uint32
function Unit:SetFacing(orientation) end

---
--- Sets the [Unit] to face the given [WorldObject]'s direction.
---
---@param target WorldObject
function Unit:SetFacingToObject(target) end

---
--- Sets creator GUID
---
---@param guid ObjectGuid
function Unit:SetCreatorGUID(guid) end

---
--- Sets pet GUID
---
---@param guid ObjectGuid
function Unit:SetPetGUID(guid) end

---
--- Toggles (Sets) [Unit]'s water walking
---
---@param enable bool @ = true
function Unit:SetWaterWalk(enable) end

---
--- Sets the [Unit]'s stand state
---
---@param state uint8 @ : stand state
function Unit:SetStandState(state) end

---
--- Sets the [Unit] in combat with the `enemy` [Unit].
---
---@param enemy Unit @ : the [Unit] to start combat with
function Unit:SetInCombatWith(enemy) end

---
--- Sets the [Unit]'s FFA flag on or off.
---
---@param apply bool @ = true
function Unit:SetFFA(apply) end

---
--- Sets the [Unit]'s sanctuary flag on or off.
---
---@param apply bool @ = true
function Unit:SetSanctuary(apply) end

---
--- Roots the [Unit] to the ground, if 'false' specified, unroots the [Unit].
---
---@param apply bool @ = true
function Unit:SetRooted(apply) end

---
--- Confuses the [Unit], if 'false' specified, the [Unit] is no longer confused.
---
---@param apply bool @ = true
function Unit:SetConfused(apply) end

---
--- Fears the [Unit], if 'false' specified, the [Unit] is no longer feared.
---
---@param apply bool @ = true
function Unit:SetFeared(apply) end

---
--- Clears the [Unit]'s threat list.
function Unit:ClearThreatList() end

---
--- Mounts the [Unit] on the given displayID/modelID.
---
---@param displayId uint32
function Unit:Mount(displayId) end

---
--- Dismounts the [Unit].
function Unit:Dismount() end

---
--- Makes the [Unit] perform the given emote.
---
---@param emoteId uint32
function Unit:PerformEmote(emoteId) end

---
--- Makes the [Unit] perform the given emote continuously.
---
---@param emoteId uint32
function Unit:EmoteState(emoteId) end

---
--- Returns calculated percentage from Health
---
---@return int32 @ percentage
function Unit:CountPctFromCurHealth() end

---
--- Returns calculated percentage from Max Health
---
---@return int32 @ percentage
function Unit:CountPctFromMaxHealth() end

---
--- Sends chat message to [Player]
---
---@param type uint8 @ : chat, whisper, etc
---@param lang uint32 @ : language to speak
---@param msg string
---@param target Player
function Unit:SendChatMessageToPlayer(type, lang, msg, target) end

---
--- Stops the [Unit]'s movement
function Unit:MoveStop() end

---
--- The [Unit]'s movement expires and clears movement
---
---@param reset bool @ = true : cleans movement
function Unit:MoveExpire(reset) end

---
--- Clears the [Unit]'s movement
---
---@param reset bool @ = true : clean movement
function Unit:MoveClear(reset) end

---
--- The [Unit] will be idle
function Unit:MoveIdle() end

---
--- The [Unit] will move at random
---
---@param radius float @ : limit on how far the [Unit] will move at random
function Unit:MoveRandom(radius) end

---
--- The [Unit] will move to its set home location
function Unit:MoveHome() end

---
--- The [Unit] will follow the target
---
---@param target Unit @ : target to follow
---@param dist float @ = 0 : distance to start following
---@param angle float @ = 0
function Unit:MoveFollow(target, dist, angle) end

---
--- The [Unit] will chase the target
---
---@param target Unit @ : target to chase
---@param dist float @ = 0 : distance start chasing
---@param angle float @ = 0
function Unit:MoveChase(target, dist, angle) end

---
--- The [Unit] will move confused
function Unit:MoveConfused() end

---
--- The [Unit] will flee
---
---@param target Unit
---@param time uint32 @ = 0 : flee delay
function Unit:MoveFleeing(target, time) end

---
--- The [Unit] will move to the coordinates
---
---@param id uint32 @ : unique waypoint Id
---@param x float
---@param y float
---@param z float
---@param genPath bool @ = true : if true, generates path
function Unit:MoveTo(id, x, y, z, genPath) end

---
--- Makes the [Unit] jump to the coordinates
---
---@param x float
---@param y float
---@param z float
---@param zSpeed float @ : start velocity
---@param maxHeight float @ : maximum height
---@param id uint32 @ = 0 : unique movement Id
function Unit:MoveJump(x, y, z, zSpeed, maxHeight, id) end

---
--- The [Unit] will whisper the message to a [Player]
---
---@param msg string @ : message for the [Unit] to emote
---@param lang uint32 @ : language for the [Unit] to speak
---@param receiver Player @ : specific [Unit] to receive the message
---@param bossWhisper bool @ = false : is a boss whisper
function Unit:SendUnitWhisper(msg, lang, receiver, bossWhisper) end

---
--- The [Unit] will emote the message
---
---@param msg string @ : message for the [Unit] to emote
---@param receiver Unit @ = nil : specific [Unit] to receive the message
---@param bossEmote bool @ = false : is a boss emote
function Unit:SendUnitEmote(msg, receiver, bossEmote) end

---
--- The [Unit] will say the message
---
---@param msg string @ : message for the [Unit] to say
---@param language uint32 @ : language for the [Unit] to speak
function Unit:SendUnitSay(msg, language) end

---
--- The [Unit] will yell the message
---
---@param msg string @ : message for the [Unit] to yell
---@param language uint32 @ : language for the [Unit] to speak
function Unit:SendUnitYell(msg, language) end

---
--- Unmorphs the [Unit] setting it's display ID back to the native display ID.
function Unit:DeMorph() end

---
--- Makes the [Unit] cast the spell on the target.
---
---@param target Unit @ = nil : can be self or another unit
---@param spell uint32 @ : entry of a spell
---@param triggered bool @ = false : if true the spell is instant and has no cost
function Unit:CastSpell(target, spell, triggered) end

---
--- Casts the [Spell] at target [Unit] with custom basepoints or casters.
--- See also [Unit:CastSpell].
---
---@param target Unit @ = nil
---@param spell uint32
---@param triggered bool @ = false
---@param bp0 int32 @ = nil : custom basepoints for [Spell] effect 1. If nil, no change is made
---@param bp1 int32 @ = nil : custom basepoints for [Spell] effect 2. If nil, no change is made
---@param bp2 int32 @ = nil : custom basepoints for [Spell] effect 3. If nil, no change is made
---@param castItem Item @ = nil
---@param originalCaster ObjectGuid @ = ObjectGuid()
function Unit:CastCustomSpell(target, spell, triggered, bp0, bp1, bp2, castItem, originalCaster) end

---
--- Makes the [Unit] cast the spell to the given coordinates, used for area effect spells.
---
---@param x float
---@param y float
---@param z float
---@param spell uint32 @ : entry of a spell
---@param triggered bool @ = false : if true the spell is instant and has no cost
function Unit:CastSpellAoF(x, y, z, spell, triggered) end

---
--- Clears the [Unit]'s combat
function Unit:ClearInCombat() end

---
--- Stops the [Unit]'s current spell cast
---
---@param spell uint32 @ = 0 : entry of a spell
function Unit:StopSpellCast(spell) end

---
--- Interrupts [Unit]'s spell state, casting, etc.
---
--- if spell is not interruptible, it will return
---
---@param spellType int32 @ : type of spell to interrupt
---@param delayed bool @ = true : skips if the spell is delayed
function Unit:InterruptSpell(spellType, delayed) end

---
--- Adds the [Aura] of the given spell entry on the given target from the [Unit].
---
---@param spell uint32 @ : entry of a spell
---@param target Unit @ : aura will be applied on the target
---@return Aura @ aura
function Unit:AddAura(spell, target) end

---
--- Removes [Aura] of the given spell entry from the [Unit].
---
---@param spell uint32 @ : entry of a spell
function Unit:RemoveAura(spell) end

---
--- Removes all [Aura]'s from the [Unit].
---
---     Note: talents and racials are also auras, use with caution
function Unit:RemoveAllAuras() end

---
--- Removes all positive visible [Aura]'s from the [Unit].
function Unit:RemoveArenaAuras() end

---
--- Adds the given unit state for the [Unit].
---
---@param state UnitState
function Unit:AddUnitState(state) end

---
--- Removes the given unit state from the [Unit].
---
---@param state UnitState
function Unit:ClearUnitState(state) end

---
--- Makes the [Unit] teleport to given coordinates within same map.
---
---@param x float
---@param y float
---@param z float
---@param o float @ : orientation
function Unit:NearTeleport(x, y, z, o) end

---
--- Makes the [Unit] damage the target [Unit]
---
--- <pre>
--- enum SpellSchools
--- {
---     SPELL_SCHOOL_NORMAL  = 0,
---     SPELL_SCHOOL_HOLY    = 1,
---     SPELL_SCHOOL_FIRE    = 2,
---     SPELL_SCHOOL_NATURE  = 3,
---     SPELL_SCHOOL_FROST   = 4,
---     SPELL_SCHOOL_SHADOW  = 5,
---     SPELL_SCHOOL_ARCANE  = 6,
---     MAX_SPELL_SCHOOL     = 7
--- };
--- </pre>
---
---@param target Unit @ : [Unit] to damage
---@param damage uint32 @ : amount to damage
---@param durabilityloss bool @ = true : if false, the damage does not do durability damage
---@param school SpellSchools @ = MAX_SPELL_SCHOOL : school the damage is done in or MAX_SPELL_SCHOOL for direct damage
---@param spell uint32 @ = 0 : spell that inflicts the damage
function Unit:DealDamage(target, damage, durabilityloss, school, spell) end

---
--- Makes the [Unit] heal the target [Unit] with given spell
---
---@param target Unit @ : [Unit] to heal
---@param spell uint32 @ : spell that causes the healing
---@param amount uint32 @ : amount to heal
---@param critical bool @ = false : if true, heal is logged as critical
function Unit:DealHeal(target, spell, amount, critical) end

---
--- Makes the [Unit] kill the target [Unit]
---
---@param target Unit @ : [Unit] to kill
---@param durLoss bool @ = true : when true, the target's items suffer durability loss
function Unit:Kill(target, durLoss) end

---
--- Adds threat to the [Unit] from the victim.
---
--- <pre>
--- enum SpellSchoolMask
--- {
---     SPELL_SCHOOL_MASK_NONE    = 0,
---     SPELL_SCHOOL_MASK_NORMAL  = 1,
---     SPELL_SCHOOL_MASK_HOLY    = 2,
---     SPELL_SCHOOL_MASK_FIRE    = 4,
---     SPELL_SCHOOL_MASK_NATURE  = 8,
---     SPELL_SCHOOL_MASK_FROST   = 16,
---     SPELL_SCHOOL_MASK_SHADOW  = 32,
---     SPELL_SCHOOL_MASK_ARCANE  = 64,
--- }
--- </pre>
---
---@param victim Unit @ : [Unit] that caused the threat
---@param threat float @ : threat amount
---@param schoolMask SpellSchoolMask @ = 0 : [SpellSchoolMask] of the threat causer
---@param spell uint32 @ = 0 : spell entry used for threat
function Unit:AddThreat(victim, threat, schoolMask, spell) end

---
--- odifies threat in pct to the [Unit] from the victim
---
---@param victim Unit @ : [Unit] that caused the threat
---@param percent int32 @ : threat amount in pct
function Unit:ModifyThreatPct(victim, percent) end

return Unit

