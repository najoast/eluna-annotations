-- Code generated by eluna-annotations-generator, PLEASE DO NOT EDIT

---@class Player
local Player = {}

---
--- Returns 'true' if the [Player] can Titan Grip, 'false' otherwise.
---
---@return bool @ canTitanGrip
function Player:CanTitanGrip() end

---
--- Returns 'true' if the [Player] has a talent by ID in specified spec, 'false' otherwise.
---
---@param spellId uint32 @ : talent spellId to check
---@param spec uint8 @ : specified spec. 0 for primary, 1 for secondary.
---@return bool @ hasTalent
function Player:HasTalent(spellId, spec) end

---
--- Returns 'true' if the [Player] has completed the specified achievement, 'false' otherwise.
---
---@param achievementId uint32
---@return bool @ hasAchieved
function Player:HasAchieved(achievementId) end

---
--- Returns 'true' if the [Player] has an active [Quest] by specific ID, 'false' otherwise.
---
---@param questId uint32
---@return bool @ hasQuest
function Player:HasQuest(questId) end

---
--- Returns 'true' if the [Player] has a skill by specific ID, 'false' otherwise.
---
---@param skill uint32
---@return bool @ hasSkill
function Player:HasSkill(skill) end

---
--- Returns 'true' if the [Player] has a [Spell] by specific ID, 'false' otherwise.
---
---@param spellId uint32
---@return bool @ hasSpell
function Player:HasSpell(spellId) end

---
--- Returns true if [Player] has specified login flag
---
---@param flag uint32
---@return bool @ hasLoginFlag
function Player:HasAtLoginFlag(flag) end

---
--- Returns true if [Player] has [Quest] for [GameObject]
---
---@param entry int32 @ : entry of a [GameObject]
---@return bool @ hasQuest
function Player:HasQuestForGO(entry) end

---
--- Returns 'true' if the [Player] has a title by specific ID, 'false' otherwise.
---
---@param titleId uint32
---@return bool @ hasTitle
function Player:HasTitle(titleId) end

---
--- Returns 'true' if the [Player] has the given amount of item entry specified, 'false' otherwise.
---
---@param itemId uint32 @ : entry of the item
---@param count uint32 @ = 1 : amount of items the player needs should have
---@param check_bank bool @ = false : determines if the item can be in player bank
---@return bool @ hasItem
function Player:HasItem(itemId, count, check_bank) end

---
--- Returns 'true' if the [Player] has a quest for the item entry specified, 'false' otherwise.
---
---@param entry uint32 @ : entry of the item
---@return bool @ hasQuest
function Player:HasQuestForItem(entry) end

---
--- Returns 'true' if the [Player] can use the item or item entry specified, 'false' otherwise.
---
--- @proto canUse = (item)
--- @proto canUse = (entry)
---@param item Item @ : an instance of an item
---@param entry uint32 @ : entry of the item
---@return bool @ canUse
function Player:CanUseItem(item, entry) end

---
--- Returns 'true' if the [Spell] specified by ID is currently on cooldown for the [Player], 'false' otherwise.
---
---@param spellId uint32
---@return bool @ hasSpellCooldown
function Player:HasSpellCooldown(spellId) end

---
--- Returns 'true' if the [Player] can share [Quest] specified by ID, 'false' otherwise.
---
---@param entryId uint32
---@return bool @ hasSpellCooldown
function Player:CanShareQuest(entryId) end

---
--- Returns 'true' if the [Player] can currently communicate through chat, 'false' otherwise.
---
---@return bool @ canSpeak
function Player:CanSpeak() end

---
--- Returns 'true' if the [Player] has permission to uninvite others from the current group, 'false' otherwise.
---
---@return bool @ canUninviteFromGroup
function Player:CanUninviteFromGroup() end

---
--- Returns 'true' if the [Player] can fly, 'false' otherwise.
---
---@return bool @ canFly
function Player:CanFly() end

---
--- Returns [Player] kills
---
---@param honorable bool @ = true : if victims are honorable
---@return uint32 @ kills
function Player:GetHonorStoredKills(honorable) end

---
--- Returns rank points
---
---@return float @ rankPoints
function Player:GetRankPoints() end

---
--- Returns last week's standing position
---
---@return int32 @ standingPos
function Player:GetHonorLastWeekStandingPos() end

---
--- Returns 'true' if the [Player] is currently in water, 'false' otherwise.
---
---@return bool @ isInWater
function Player:IsInWater() end

---
--- Returns 'true' if the [Player] is currently moving, 'false' otherwise.
---
---@return bool @ isMoving
function Player:IsMoving() end

---
--- Updates the [Player]s weekly honor status
function Player:UpdateHonor() end

---
--- Resets the [Player]s weekly honor status
function Player:ResetHonor() end

---
--- Clears all of [Player]s weekly honor status
function Player:ClearHonorInfo() end

---
--- Returns 'true' if the [Player] is currently flying, 'false' otherwise.
---
---@return bool @ isFlying
function Player:IsFlying() end

---
--- Returns 'true' if the [Player] is in a [Group], 'false' otherwise.
---
---@return bool @ isInGroup
function Player:IsInGroup() end

---
--- Returns 'true' if the [Player] is in a [Guild], 'false' otherwise.
---
---@return bool @ isInGuild
function Player:IsInGuild() end

---
--- Returns 'true' if the [Player] is a Game Master, 'false' otherwise.
---
--- Note: This is only true when GM tag is activated! For alternative see [Player:GetGMRank]
---
---@return bool @ isGM
function Player:IsGM() end

---
--- Returns 'true' if the [Player] is in an arena team specified by type, 'false' otherwise.
---
---@param type uint32
---@return bool @ isInArenaTeam
function Player:IsInArenaTeam(type) end

---
--- Returns 'true' if the [Player] is immune to everything.
---
---@return bool @ isImmune
function Player:IsImmuneToDamage() end

---
--- Returns 'true' if the [Player] satisfies all requirements to complete the quest entry.
---
---@param entry uint32
---@return bool @ canComplete
function Player:CanCompleteQuest(entry) end

---
--- Returns 'true' if the [Player] is a part of the Horde faction, 'false' otherwise.
---
---@return bool @ isHorde
function Player:IsHorde() end

---
--- Returns 'true' if the [Player] is a part of the Alliance faction, 'false' otherwise.
---
---@return bool @ isAlliance
function Player:IsAlliance() end

---
--- Returns 'true' if the [Player] is 'Do Not Disturb' flagged, 'false' otherwise.
---
---@return bool @ isDND
function Player:IsDND() end

---
--- Returns 'true' if the [Player] is 'Away From Keyboard' flagged, 'false' otherwise.
---
---@return bool @ isAFK
function Player:IsAFK() end

---
--- Returns 'true' if the [Player] is currently falling, 'false' otherwise.
---
---@return bool @ isFalling
function Player:IsFalling() end

---
--- Returns 'true' if the [Player] is currently in the same raid as another [Player] by object, 'false' otherwise.
---
---@param player Player
---@return bool @ isInSameRaidWith
function Player:IsInSameRaidWith(player) end

---
--- Returns 'true' if the [Player] is currently in the same [Group] as another [Player] by object, 'false' otherwise.
---
---@param player Player
---@return bool @ isInSameGroupWith
function Player:IsInSameGroupWith(player) end

---
--- Returns 'true' if the [Player] is eligible for Honor or XP gain by [Unit] specified, 'false' otherwise.
---
---@param unit Unit
---@return bool @ isHonorOrXPTarget
function Player:IsHonorOrXPTarget(unit) end

---
--- Returns 'true' if the [Player] can see anoter [Player] specified by object, 'false' otherwise.
---
---@param player Player
---@return bool @ isVisibleForPlayer
function Player:IsVisibleForPlayer(player) end

---
--- Returns 'true' if the [Player] has taxi cheat activated, 'false' otherwise.
---
---@return bool @ isTaxiCheater
function Player:IsTaxiCheater() end

---
--- Returns 'true' if the [Player] is accepting whispers, 'false' otherwise.
---
---@return bool @ isAcceptingWhispers
function Player:IsAcceptingWhispers() end

---
--- Returns 'true' if the [Player] is currently rested, 'false' otherwise.
---
---@return bool @ isRested
function Player:IsRested() end

---
--- Returns 'true' if the [Player] is currently in a [BattleGround] queue, 'false' otherwise.
---
---@return bool @ inBattlegroundQueue
function Player:InBattlegroundQueue() end

---
--- Returns 'true' if the [Player] is currently in an arena, 'false' otherwise.
---
---@return bool @ inArena
function Player:InArena() end

---
--- Returns 'true' if the [Player] is currently in a [BattleGround], 'false' otherwise.
---
---@return bool @ inBattleGround
function Player:InBattleground() end

---
--- Returns 'true' if the [Player] can block incomming attacks, 'false' otherwise.
---
---@return bool @ canBlock
function Player:CanBlock() end

---
--- Returns 'true' if the [Player] can parry incomming attacks, 'false' otherwise.
---
---@return bool @ canParry
function Player:CanParry() end

---
--- Returns the amount of available specs the [Player] currently has
---
---@return uint8 @ specCount
function Player:GetSpecsCount() end

---
--- Returns the [Player]s active spec ID
---
---@return uint32 @ specId
function Player:GetActiveSpec() end

---
--- Returns the normal phase of the player instead of the actual phase possibly containing GM phase
---
---@return uint32 @ phasemask
function Player:GetPhaseMaskForSpawn() end

---
--- Returns the [Player]s current amount of Arena Points
---
---@return uint32 @ arenaPoints
function Player:GetArenaPoints() end

---
--- Returns the [Player]s current amount of Honor Points
---
---@return uint32 @ honorPoints
function Player:GetHonorPoints() end

---
--- Returns the [Player]s current shield block value
---
---@return uint32 @ blockValue
function Player:GetShieldBlockValue() end

---
--- Returns the [Player]s cooldown delay by specified [Spell] ID
---
---@param spellId uint32
---@return uint32 @ spellCooldownDelay
function Player:GetSpellCooldownDelay(spellId) end

---
--- Returns the [Player]s current latency in MS
---
---@return uint32 @ latency
function Player:GetLatency() end

---
--- Returns the faction ID the [Player] is currently flagged as champion for
---
---@return uint32 @ championingFaction
function Player:GetChampioningFaction() end

---
--- Returns [Player]s original sub group
---
---@return uint8 @ subGroup
function Player:GetOriginalSubGroup() end

---
--- Returns [Player]s original [Group] object
---
---@return Group @ group
function Player:GetOriginalGroup() end

---
--- Returns a random Raid Member [Player] object within radius specified of [Player]
---
---@param radius float
---@return Player @ player
function Player:GetNextRandomRaidMember(radius) end

---
--- Returns [Player]s current sub group
---
---@return uint8 @ subGroup
function Player:GetSubGroup() end

---
--- Returns [Group] invitation
---
---@return Group @ group
function Player:GetGroupInvite() end

---
--- Returns rested experience bonus
---
---@param xp uint32
---@return uint32 @ xpBonus
function Player:GetXPRestBonus(xp) end

---
--- Returns the [Player]s current [BattleGround] type ID
---
---@return BattleGroundTypeId @ typeId
function Player:GetBattlegroundTypeId() end

---
--- Returns the [Player]s current [BattleGround] ID
---
---@return uint32 @ battleGroundId
function Player:GetBattlegroundId() end

---
--- Returns the [Player]s reputation rank of faction specified
---
---@param faction uint32
---@return ReputationRank @ rank
function Player:GetReputationRank(faction) end

---
--- Returns the [Player]s current level of intoxication
---
---@return uint16 @ drunkValue
function Player:GetDrunkValue() end

---
--- Returns skill temporary bonus value
---
---@param skill uint32
---@param bonusVal int16
function Player:GetSkillTempBonusValue(skill, bonusVal) end

---
--- Returns skill permanent bonus value
---
---@param skill uint32
---@param bonusVal int16
function Player:GetSkillPermBonusValue(skill, bonusVal) end

---
--- Returns skill value without bonus'
---
---@param skill uint32
---@return uint16 @ pureVal
function Player:GetPureSkillValue(skill) end

---
--- Returns base skill value
---
---@param skill uint32
---@return uint16 @ baseVal
function Player:GetBaseSkillValue(skill) end

---
--- Returns skill value
---
---@param skill uint32
---@return uint16 @ val
function Player:GetSkillValue(skill) end

---
--- Returns max value of specified skill without bonus'
---
---@param skill uint32
---@return uint16 @ pureVal
function Player:GetPureMaxSkillValue(skill) end

---
--- Returns max value of specified skill
---
---@param skill uint32
---@return uint16 @ val
function Player:GetMaxSkillValue(skill) end

---
--- Returns mana bonus from amount of intellect
---
---@return float @ bonus
function Player:GetManaBonusFromIntellect() end

---
--- Returns health bonus from amount of stamina
---
---@return float @ bonus
function Player:GetHealthBonusFromStamina() end

---
--- Returns raid or dungeon difficulty
---
---@param isRaid bool @ = true : argument is TrinityCore only
---@return int32 @ difficulty
function Player:GetDifficulty(isRaid) end

---
--- Returns the [Player]s current guild rank
---
---@return uint32 @ guildRank
function Player:GetGuildRank() end

---
--- Returns the [Player]s free talent point amount
---
---@return uint32 @ freeTalentPointAmt
function Player:GetFreeTalentPoints() end

---
--- Returns the name of the [Player]s current [Guild]
---
---@return string @ guildName
function Player:GetGuildName() end

---
--- Returns the amount of reputation the [Player] has with the faction specified
---
---@param faction uint32
---@return int32 @ reputationAmt
function Player:GetReputation(faction) end

---
--- Returns [Unit] target combo points are on
---
---@return Unit @ target
function Player:GetComboTarget() end

---
--- Returns [Player]'s combo points
---
---@return uint8 @ comboPoints
function Player:GetComboPoints() end

---
--- Returns the amount of time the [Player] has spent ingame
---
---@return uint32 @ inGameTime
function Player:GetInGameTime() end

---
--- Returns the status of the [Player]s [Quest] specified by entry ID
---
---@param questId uint32
---@return QuestStatus @ questStatus
function Player:GetQuestStatus(questId) end

---
--- Returns 'true' if the [Player]s [Quest] specified by entry ID has been rewarded, 'false' otherwise.
---
---@param questId uint32
---@return bool @ questRewardStatus
function Player:GetQuestRewardStatus(questId) end

---
--- Returns [Quest] required [Creature] or [GameObject] count
---
---@param quest uint32 @ : entry of a quest
---@param entry int32 @ : entry of required [Creature]
---@return uint16 @ count
function Player:GetReqKillOrCastCurrentCount(quest, entry) end

---
--- Returns the quest level of the [Player]s [Quest] specified by object
---
---@param questId uint32
---@return QuestStatus @ questRewardStatus
function Player:GetQuestLevel(questId) end

---
--- Returns a [Player]s [Item] object by gear slot specified
---
---@param slot uint8
---@return Item @ item
function Player:GetEquippedItemBySlot(slot) end

---
--- Returns the [Player]s current resting bonus
---
---@return float @ restBonus
function Player:GetRestBonus() end

---
--- Returns active GM chat tag
---
---@return uint8 @ tag
function Player:GetChatTag() end

---
--- Returns an item in given bag on given slot.
---
--- <pre>
--- Possible and most commonly used combinations:
---
--- bag = 255
--- slots 0-18 equipment
--- slots 19-22 equipped bag slots
--- slots 23-38 backpack
--- slots 39-66 bank main slots
--- slots 67-74 bank bag slots
--- slots 86-117 keyring
---
--- bag = 19-22
--- slots 0-35 for equipped bags
---
--- bag = 67-74
--- slots 0-35 for bank bags
--- </pre>
---
---@param bag uint8 @ : the bag the [Item] is in, you can get this with [Item:GetBagSlot]
---@param slot uint8 @ : the slot the [Item] is in within the bag, you can get this with [Item:GetSlot]
---@return Item @ item, : [Item] or nil
function Player:GetItemByPos(bag, slot) end

---
--- Returns an [Item] from the player by guid.
---
--- The item can be equipped, in bags or in bank.
---
---@param guid ObjectGuid @ : an item guid
---@return Item @ item
function Player:GetItemByGUID(guid) end

---
--- Returns a mailed [Item] by guid.
---
---@param guid ObjectGuid @ : an item guid
---@return Item @ item
function Player:GetMailItem(guid) end

---
--- Returns an [Item] from the player by entry.
---
--- The item can be equipped, in bags or in bank.
---
---@param entryId uint32
---@return Item @ item
function Player:GetItemByEntry(entryId) end

---
--- Returns the database textID of the [WorldObject]'s gossip header text for the [Player]
---
---@param object WorldObject
---@return uint32 @ textId, : key to npc_text database table
function Player:GetGossipTextId(object) end

---
--- Returns the [Player]s currently selected [Unit] object
---
---@return Unit @ unit
function Player:GetSelection() end

---
--- Returns the [Player]s GM Rank
---
---@return AccountTypes @ gmRank
function Player:GetGMRank() end

---
--- Returns the [Player]s amount of money in copper
---
---@return uint32 @ coinage
function Player:GetCoinage() end

---
--- Returns the [Player]s current [Guild] ID
---
---@return uint32 @ guildId
function Player:GetGuildId() end

---
--- Returns the [Player]s [TeamId]
---
---@return TeamId @ teamId
function Player:GetTeam() end

---
--- Returns amount of the specified [Item] the [Player] has.
---
---@param entry uint32 @ : entry of the item
---@param checkinBank bool @ = false : also counts the items in player's bank if true
---@return uint32 @ itemamount
function Player:GetItemCount(entry, checkinBank) end

---
--- Returns the [Player]s lifetime Honorable Kills
---
---@return uint32 @ lifeTimeKils
function Player:GetLifetimeKills() end

---
--- Returns the [Player]s IP address
---
---@return string @ ip
function Player:GetPlayerIP() end

---
--- Returns the [Player]s time played at current level
---
---@return uint32 @ currLevelPlayTime
function Player:GetLevelPlayedTime() end

---
--- Returns the [Player]s total time played
---
---@return uint32 @ totalPlayTime
function Player:GetTotalPlayedTime() end

---
--- Returns the [Player]s [Guild] object
---
---@return Guild @ guild
function Player:GetGuild() end

---
--- Returns the [Player]s [Group] object
---
---@return Group @ group
function Player:GetGroup() end

---
--- Returns the [Player]s account ID
---
---@return uint32 @ accountId
function Player:GetAccountId() end

---
--- Returns the [Player]s account name
---
---@return string @ accountName
function Player:GetAccountName() end

---
--- Returns the [Player]s [Corpse] object
---
---@return Corpse @ corpse
function Player:GetCorpse() end

---
--- Returns the [Player]s database locale index
---
---@return int @ localeIndex
function Player:GetDbLocaleIndex() end

---
--- Returns the [Player]s game client locale
---
---@return LocaleConstant @ locale
function Player:GetDbcLocale() end

---
--- Locks the player controls and disallows all movement and casting.
---
---@param apply bool @ = true : lock if true and unlock if false
function Player:SetPlayerLock(apply) end

---
--- Sets the [Player]s login flag to the flag specified
---
---@param flag uint32
function Player:SetAtLoginFlag(flag) end

---
--- Sets the [Player]s sheathe state to the state specified
---
---@param sheatheState uint32
function Player:SetSheath(sheatheState) end

---
--- Sets the [Player]s intoxication level to the level specified
---
---@param drunkValue uint8
function Player:SetDrunkValue(drunkValue) end

---
--- Sets the [Player]s faction standing to that of the race specified
---
---@param raceId uint8
function Player:SetFactionForRace(raceId) end

---
--- Sets (increases) skill of the [Player]
---
---@param id uint16
---@param step uint16
---@param currVal uint16
---@param maxVal uint16
function Player:SetSkill(id, step, currVal, maxVal) end

---
--- Sets the [Player]s guild rank to the rank specified
---
---@param rank uint8
function Player:SetGuildRank(rank) end

---
--- Sets the [Player]s free talent points to the amount specified for the current spec
---
---@param talentPointAmt uint32
function Player:SetFreeTalentPoints(talentPointAmt) end

---
--- Sets the [Player]s reputation amount for the faction specified
---
---@param factionId uint32
---@param reputationValue int32
function Player:SetReputation(factionId, reputationValue) end

---
--- Sets [Quest] state
---
---@param entry uint32 @ : entry of a quest
---@param status uint32
function Player:SetQuestStatus(entry, status) end

---
--- Sets the [Player]s rest bonus to the amount specified
---
---@param restBonus float
function Player:SetRestBonus(restBonus) end

---
--- Toggles whether the [Player] accepts whispers or not
---
---@param acceptWhispers bool @ = true
function Player:SetAcceptWhispers(acceptWhispers) end

---
--- Toggles PvP Death
---
---@param on bool @ = true
function Player:SetPvPDeath(on) end

---
--- Toggles whether the [Player] has GM visibility on or off
---
---@param gmVisible bool @ = true
function Player:SetGMVisible(gmVisible) end

---
--- Toggles whether the [Player] has taxi cheat enabled or not
---
---@param taxiCheat bool @ = true
function Player:SetTaxiCheat(taxiCheat) end

---
--- Toggle Blizz (GM) tag
---
---@param on bool @ = true
function Player:SetGMChat(on) end

---
--- Toggles the [Player]s GM mode on or off
---
---@param setGmMode bool @ = true
function Player:SetGameMaster(setGmMode) end

---
--- Sets the [Player]s gender to gender specified
---
--- - GENDER_MALE    = 0
--- - GENDER_FEMALE  = 1
---
---@param gender Gender
function Player:SetGender(gender) end

---
--- Sets the [Player]s Arena Points to the amount specified
---
---@param arenaPoints uint32
function Player:SetArenaPoints(arenaPoints) end

---
--- Sets the [Player]s Honor Points to the amount specified
---
---@param honorPoints uint32
function Player:SetHonorPoints(honorPoints) end

---
--- Sets kills
---
---@param kills uint32
---@param honorable bool @ = true : if victims were honorable
function Player:SetHonorStoredKills(kills, honorable) end

---
--- Sets rank points
---
---@param rankPoints float
function Player:SetRankPoints(rankPoints) end

---
--- Sets last week's honor standing position
---
---@param standingPos int32
function Player:SetHonorLastWeekStandingPos(standingPos) end

---
--- Sets the [Player]s amount of Lifetime Honorable Kills to the value specified
---
---@param honorableKills uint32
function Player:SetLifetimeKills(honorableKills) end

---
--- Sets the [Player]s amount of money to copper specified
---
---@param copperAmt uint32
function Player:SetCoinage(copperAmt) end

---
--- Sets the [Player]s home location to the location specified
---
---@param x float @ : X Coordinate
---@param y float @ : Y Coordinate
---@param z float @ : Z Coordinate
---@param mapId uint32 @ : Map ID
---@param areaId uint32 @ : Area ID
function Player:SetBindPoint(x, y, z, mapId, areaId) end

---
--- Adds the specified title to the [Player]s list of known titles
---
---@param titleId uint32
function Player:SetKnownTitle(titleId) end

---
--- Adds the specified achievement to the [Player]s
---
---@param achievementid uint32
function Player:SetAchievement(achievementid) end

---
--- Toggle the [Player]s FFA flag
---
---@param applyFFA bool @ = true
function Player:SetFFA(applyFFA) end

---
--- Resets the [Player]s pets talent points
function Player:ResetPetTalents() end

---
--- Reset the [Player]s completed achievements
function Player:ResetAchievements() end

---
--- Shows the mailbox window to the player from specified guid.
---
---@param guid ObjectGuid @ = playerguid : guid of the mailbox window sender
function Player:SendShowMailBox(guid) end

---
--- Adds or detracts from the [Player]s current Arena Points
---
---@param amount int32
function Player:ModifyArenaPoints(amount) end

---
--- Adds or detracts from the [Player]s current Honor Points
---
---@param amount int32
function Player:ModifyHonorPoints(amount) end

---
--- Saves the [Player] to the database
function Player:SaveToDB() end

---
--- Sends a summon request to the player from the given summoner
---
---@param summoner Unit
function Player:SummonPlayer(summoner) end

---
--- Mutes the [Player] for the amount of seconds specified
---
---@param muteTime uint32
function Player:Mute(muteTime) end

---
--- Rewards the given quest entry for the [Player] if he has completed it.
---
---@param entry uint32 @ : quest entry
function Player:RewardQuest(entry) end

---
--- Sends an auction house window to the [Player] from the [Unit] specified
---
---@param sender Unit
function Player:SendAuctionMenu(sender) end

---
--- Sends a flightmaster window to the [Player] from the [Creature] specified
---
---@param sender Creature
function Player:SendTaxiMenu(sender) end

---
--- Sends a spirit resurrection request to the [Player]
function Player:SendSpiritResurrect() end

---
--- Sends a tabard vendor window to the [Player] from the [WorldObject] specified
---
---@param sender WorldObject
function Player:SendTabardVendorActivate(sender) end

---
--- Sends a bank window to the [Player] from the [WorldObject] specified.
---
---@param sender WorldObject
function Player:SendShowBank(sender) end

---
--- Sends a vendor window to the [Player] from the [WorldObject] specified.
---
---@param sender WorldObject
function Player:SendListInventory(sender) end

---
--- Sends a trainer window to the [Player] from the [Creature] specified
---
---@param sender Creature
function Player:SendTrainerList(sender) end

---
--- Sends a guild invitation from the [Player]s [Guild] to the [Player] object specified
---
---@param invitee Player
function Player:SendGuildInvite(invitee) end

---
--- Sends an update for the world state to the [Player]
---
---@param field uint32
---@param value uint32
function Player:SendUpdateWorldState(field, value) end

---
--- Forces the [Player] to log out
---
---@param saveToDb bool @ = true
function Player:LogoutPlayer(saveToDb) end

---
--- Forcefully removes the [Player] from a [BattleGround] raid group
function Player:RemoveFromBattlegroundRaid() end

---
--- Unbinds the [Player] from his instances except the one he currently is in.
---
--- Difficulty is not used on classic.
---
---@param map uint32 @ = true
---@param difficulty uint32 @ = 0
function Player:UnbindInstance(map, difficulty) end

---
--- Unbinds the [Player] from his instances except the one he currently is in.
function Player:UnbindAllInstances() end

---
--- Forces the [Player] to leave a [BattleGround]
---
---@param teleToEntry bool @ = true
function Player:LeaveBattleground(teleToEntry) end

---
--- Repairs [Item] at specified position.
---
---@param position uint16
---@param cost bool @ = true
---@param discountMod float @ = 1.0
function Player:DurabilityRepair(position, cost, discountMod) end

---
--- Repairs all [Item]s.
---
---@param takeCost bool @ = true
---@param discountMod float @ = 1.0
---@param guidBank bool @ = false
function Player:DurabilityRepairAll(takeCost, discountMod, guidBank) end

---
--- Sets durability loss for an [Item] in the specified slot
---
---@param slot int32
function Player:DurabilityPointLossForEquipSlot(slot) end

---
--- Sets durability loss on all [Item]s equipped
---
--- If inventory is true, sets durability loss for [Item]s in bags
---
---@param points int32
---@param inventory bool @ = true
function Player:DurabilityPointsLossAll(points, inventory) end

---
--- Sets durability loss for the specified [Item]
---
---@param item Item
---@param points int32
function Player:DurabilityPointsLoss(item, points) end

---
--- Damages specified [Item]
---
---@param item Item
---@param percent double
function Player:DurabilityLoss(item, percent) end

---
--- Damages all [Item]s equipped. If inventory is true, damages [Item]s in bags
---
---@param percent double
---@param inventory bool @ = true
function Player:DurabilityLossAll(percent, inventory) end

---
--- Kills the [Player]
function Player:KillPlayer() end

---
--- Forces the [Player] to leave a [Group]
function Player:RemoveFromGroup() end

---
--- Returns the [Player]s accumulated talent reset cost
---
---@return uint32 @ resetCost
function Player:ResetTalentsCost() end

---
--- Resets the [Player]s talents
---
---@param noCost bool @ = true
function Player:ResetTalents(noCost) end

---
--- Removes the [Spell] from the [Player]
---
---@param entry uint32 @ : entry of a [Spell]
function Player:RemoveSpell(entry) end

---
--- Clears the [Player]s combo points
function Player:ClearComboPoints() end

---
--- Adds combo points to the [Player]
---
---@param target Unit
---@param count int8
function Player:AddComboPoints(target, count) end

---
--- Gives [Quest] monster talked to credit
---
---@param entry uint32 @ : entry of a [Creature]
---@param creature Creature
function Player:TalkedToCreature(entry, creature) end

---
--- Gives [Quest] monster killed credit
---
---@param entry uint32 @ : entry of a [Creature]
function Player:KilledMonsterCredit(entry) end

---
--- Completes a [Quest] if in a [Group]
---
---@param quest uint32 @ : entry of a quest
---@param obj WorldObject
function Player:GroupEventHappens(quest, obj) end

---
--- Completes the [Quest] if a [Quest] area is explored, or completes the [Quest]
---
---@param quest uint32 @ : entry of a [Quest]
function Player:AreaExploredOrEventHappens(quest) end

---
--- Sets the given [Quest] entry failed for the [Player].
---
---@param entry uint32 @ : entry of a [Quest]
function Player:FailQuest(entry) end

---
--- Sets the given quest entry incomplete for the [Player].
---
---@param entry uint32 @ : quest entry
function Player:IncompleteQuest(entry) end

---
--- Completes the given quest entry for the [Player] and tries to satisfy all quest requirements.
---
--- The player should have the quest to complete it.
---
---@param entry uint32 @ : quest entry
function Player:CompleteQuest(entry) end

---
--- Tries to add the given quest entry for the [Player].
---
---@param entry uint32 @ : quest entry
function Player:AddQuest(entry) end

---
--- Removes the given quest entry from the [Player].
---
---@param entry uint32 @ : quest entry
function Player:RemoveQuest(entry) end

---
--- Sends whisper text from the [Player]
---
---@param text string
---@param lang uint32 @ : language the [Player] will speak
---@param receiver Player @ : is the [Player] that will receive the whisper, if TrinityCore
---@param guid ObjectGuid @ : is the GUID of a [Player] that will receive the whisper, not TrinityCore
function Player:Whisper(text, lang, receiver, guid) end

---
--- Sends a text emote from the [Player]
---
---@param emoteText string
function Player:TextEmote(emoteText) end

---
--- Sends yell text from the [Player]
---
---@param text string @ : text for the [Player] to yells
---@param lang uint32 @ : language the [Player] will speak
function Player:Yell(text, lang) end

---
--- Sends say text from the [Player]
---
---@param text string @ : text for the [Player] to say
---@param lang uint32 @ : language the [Player] will speak
function Player:Say(text, lang) end

---
--- Gives the [Player] experience
---
---@param xp uint32 @ : experience to give
---@param victim Unit @ = nil
function Player:GiveXP(xp, victim) end

---
--- Toggle the [Player]s 'Do Not Disturb' flag
function Player:ToggleDND() end

---
--- Toggle the [Player]s 'Away From Keyboard' flag
function Player:ToggleAFK() end

---
--- Equips the given item or item entry to the given slot. Returns the equipped item or nil.
---
---     enum EquipmentSlots // 19 slots
---     {
---         EQUIPMENT_SLOT_START        = 0,
---         EQUIPMENT_SLOT_HEAD         = 0,
---         EQUIPMENT_SLOT_NECK         = 1,
---         EQUIPMENT_SLOT_SHOULDERS    = 2,
---         EQUIPMENT_SLOT_BODY         = 3,
---         EQUIPMENT_SLOT_CHEST        = 4,
---         EQUIPMENT_SLOT_WAIST        = 5,
---         EQUIPMENT_SLOT_LEGS         = 6,
---         EQUIPMENT_SLOT_FEET         = 7,
---         EQUIPMENT_SLOT_WRISTS       = 8,
---         EQUIPMENT_SLOT_HANDS        = 9,
---         EQUIPMENT_SLOT_FINGER1      = 10,
---         EQUIPMENT_SLOT_FINGER2      = 11,
---         EQUIPMENT_SLOT_TRINKET1     = 12,
---         EQUIPMENT_SLOT_TRINKET2     = 13,
---         EQUIPMENT_SLOT_BACK         = 14,
---         EQUIPMENT_SLOT_MAINHAND     = 15,
---         EQUIPMENT_SLOT_OFFHAND      = 16,
---         EQUIPMENT_SLOT_RANGED       = 17,
---         EQUIPMENT_SLOT_TABARD       = 18,
---         EQUIPMENT_SLOT_END          = 19
---     };
---
---     enum InventorySlots // 4 slots
---     {
---         INVENTORY_SLOT_BAG_START    = 19,
---         INVENTORY_SLOT_BAG_END      = 23
---     };
---
--- @proto equippedItem = (item, slot)
--- @proto equippedItem = (entry, slot)
---@param item Item @ : item to equip
---@param entry uint32 @ : entry of the item to equip
---@param slot uint32 @ : equipment slot to equip the item to The slot can be [EquipmentSlots] or [InventorySlots]
---@return Item @ equippedItem, : item or nil if equipping failed
function Player:EquipItem(item, entry, slot) end

---
--- Returns true if the player can equip the given [Item] or item entry to the given slot, false otherwise.
---
--- @proto canEquip = (item, slot)
--- @proto canEquip = (entry, slot)
---@param item Item @ : item to equip
---@param entry uint32 @ : entry of the item to equip
---@param slot uint32 @ : equipment slot to test
---@return bool @ canEquip
function Player:CanEquipItem(item, entry, slot) end

---
--- Removes a title by ID from the [Player]s list of known titles
---
---@param titleId uint32
function Player:UnsetKnownTitle(titleId) end

---
--- Advances all of the [Player]s weapon skills to the maximum amount available
function Player:AdvanceSkillsToMax() end

---
--- Advances all of the [Player]s skills to the amount specified
---
---@param skillStep uint32
function Player:AdvanceAllSkills(skillStep) end

---
--- Advances a [Player]s specific skill to the amount specified
---
---@param skillId uint32
---@param skillStep uint32
function Player:AdvanceSkill(skillId, skillStep) end

---
--- Teleports a [Player] to the location specified
---
---@param mappId uint32
---@param xCoord float
---@param yCoord float
---@param zCoord float
---@param orientation float
function Player:Teleport(mappId, xCoord, yCoord, zCoord, orientation) end

---
--- Adds the given amount of the specified item entry to the player.
---
---@param entry uint32 @ : entry of the item to add
---@param itemCount uint32 @ = 1 : amount of the item to add
---@return Item @ item, : the item that was added or nil
function Player:AddItem(entry, itemCount) end

---
--- Removes the given amount of the specified [Item] from the player.
---
--- @proto (item, itemCount)
--- @proto (entry, itemCount)
---@param item Item @ : item to remove
---@param entry uint32 @ : entry of the item to remove
---@param itemCount uint32 @ = 1 : amount of the item to remove
function Player:RemoveItem(item, entry, itemCount) end

---
--- Removes specified amount of lifetime kills
---
---@param val uint32 @ : kills to remove
function Player:RemoveLifetimeKills(val) end

---
--- Resets cooldown of the specified spell
---
---@param spellId uint32
---@param update bool @ = true
function Player:ResetSpellCooldown(spellId, update) end

---
--- Resets cooldown of the specified category
---
---@param category uint32
---@param update bool @ = true
function Player:ResetTypeCooldowns(category, update) end

---
--- Resets all of the [Player]'s cooldowns
function Player:ResetAllCooldowns() end

---
--- Sends a Broadcast Message to the [Player]
---
---@param message string
function Player:SendBroadcastMessage(message) end

---
--- Sends an Area Trigger Message to the [Player]
---
---@param message string
function Player:SendAreaTriggerMessage(message) end

---
--- Sends a Notification to the [Player]
---
---@param message string
function Player:SendNotification(message) end

---
--- Sends a [WorldPacket] to the [Player]
---
---@param packet WorldPacket
---@param selfOnly bool @ = true
function Player:SendPacket(packet, selfOnly) end

---
--- Sends addon message to the [Player] receiver
---
---
---@param prefix string
---@param message string
---@param channel ChatMsg
---@param receiver Player
function Player:SendAddonMessage(prefix, message, channel, receiver) end

---
--- Kicks the [Player] from the server
function Player:KickPlayer() end

---
--- Adds or subtracts from the [Player]s money in copper
---
---@param copperAmt int32 @ : negative to remove, positive to add
function Player:ModifyMoney(copperAmt) end

---
--- Teaches the [Player] the [Spell] specified by entry ID
---
---@param spellId uint32
function Player:LearnSpell(spellId) end

---
--- Learn the [Player] the talent specified by talent_id and talentRank
---
---@param talent_id uint32
---@param talentRank uint32
function Player:LearnTalent(talent_id, talentRank) end

---
--- Remove cooldowns on spells that have less than 10 minutes of cooldown from the [Player], similarly to when you enter an arena.
function Player:RemoveArenaSpellCooldowns() end

---
--- Resurrects the [Player].
---
---@param healthPercent float @ = 100.0f
---@param ressSickness bool @ = false
function Player:ResurrectPlayer(healthPercent, ressSickness) end

---
--- Adds a new item to the gossip menu shown to the [Player] on next call to [Player:GossipSendMenu].
---
--- sender and intid are numbers which are passed directly to the gossip selection handler. Internally they are partly used for the database gossip handling.  
--- code specifies whether to show a box to insert text to. The player inserted text is passed to the gossip selection handler.  
--- money specifies an amount of money the player needs to have to click the option. An error message is shown if the player doesn't have enough money.  
--- Note that the money amount is only checked client side and is not removed from the player either. You will need to check again in your code before taking action.
---
--- See also: [Player:GossipSendMenu], [Player:GossipAddQuests], [Player:GossipComplete], [Player:GossipClearMenu]
---
---@param icon uint32 @ : number that specifies used icon
---@param msg string @ : label on the gossip item
---@param sender uint32 @ : number passed to gossip handlers
---@param intid uint32 @ : number passed to gossip handlers
---@param code bool @ = false : show text input on click if true
---@param popup string @ = nil : if non empty string, a popup with given text shown on click
---@param money uint32 @ = 0 : required money in copper
function Player:GossipMenuAddItem(icon, msg, sender, intid, code, popup, money) end

---
--- Closes the [Player]s currently open Gossip Menu.
---
--- See also: [Player:GossipMenuAddItem], [Player:GossipAddQuests], [Player:GossipSendMenu], [Player:GossipClearMenu]
function Player:GossipComplete() end

---
--- Sends the current gossip items of the player to him as a gossip menu with header text from the given textId.
---
--- If sender is a [Player] then menu_id is mandatory, otherwise it is not used for anything.
--- menu_id is the ID used to trigger the OnGossipSelect registered for players. See [Global:RegisterPlayerGossipEvent]
---
--- See also: [Player:GossipMenuAddItem], [Player:GossipAddQuests], [Player:GossipComplete], [Player:GossipClearMenu]
---
--- @proto (npc_text, sender)
--- @proto (npc_text, sender, menu_id)
---@param npc_text uint32 @ : entry ID of a header text in npc_text database table, common default is 100
---@param sender Object @ : object acting as the source of the sent gossip menu
---@param menu_id uint32 @ : if sender is a [Player] then menu_id is mandatory
function Player:GossipSendMenu(npc_text, sender, menu_id) end

---
--- Clears the [Player]s current gossip item list.
---
--- See also: [Player:GossipMenuAddItem], [Player:GossipSendMenu], [Player:GossipAddQuests], [Player:GossipComplete]
---
---     Note: This is needed when you show a gossip menu without using gossip hello or select hooks which do this automatically.
---     Usually this is needed when using [Player] is the sender of a Gossip Menu.
function Player:GossipClearMenu() end

---
--- Attempts to start the taxi/flying to the given pathID
---
---@param pathId uint32 @ : pathId from DBC or [Global:AddTaxiPath]
function Player:StartTaxi(pathId) end

---
--- Sends POI to the location on your map
---
---@param x float
---@param y float
---@param icon uint32 @ : map icon to show
---@param flags uint32
---@param data uint32
---@param iconText string
function Player:GossipSendPOI(x, y, icon, flags, data, iconText) end

---
--- Adds the gossip items to the [Player]'s gossip for the quests the given [WorldObject] can offer to the player.
---
---@param source WorldObject @ : a questgiver with quests
function Player:GossipAddQuests(source) end

---
--- Shows a quest accepting window to the [Player] for the given quest.
---
---@param questId uint32 @ : entry of a quest
---@param activateAccept bool @ = true : auto finish the quest
function Player:SendQuestTemplate(questId, activateAccept) end

---
--- Converts [Player]'s corpse to bones
function Player:SpawnBones() end

---
--- Loots [Player]'s bones for insignia
---
---@param looter Player
function Player:RemovedInsignia(looter) end

---
--- Makes the [Player] invite another player to a group.
---
---@param invited Player @ : player to invite to group
---@return bool @ success, : true if the player was invited to a group
function Player:GroupInvite(invited) end

---
--- Creates a new [Group] with the creator [Player] as leader.
---
---@param invited Player @ : player to add to group
---@return Group @ createdGroup, : the created group or nil
function Player:GroupCreate(invited) end

---
--- Starts a cinematic for the [Player]
---
---@param CinematicSequenceId uint32 @ : entry of a cinematic
function Player:SendCinematicStart(CinematicSequenceId) end

---
--- Starts a movie for the [Player]
---
---@param MovieId uint32 @ : entry of a movie
function Player:SendMovieStart(MovieId) end

return Player

